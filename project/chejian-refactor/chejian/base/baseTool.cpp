#include "baseTool.h"
#include <sys/stat.h>
#include <unistd.h>
#include <sys/types.h>
#include <dirent.h>
#include <string>
#include <iostream>
#include <cstring>
#include <cstdio>
#include <ctime>
#include <vector>
#include <sys/socket.h>
#include <net/if.h>
#include <sys/ioctl.h>
#include <arpa/inet.h>
#include <../alg/algTaskBase.h>
#include <dirent.h>

#include <algorithm>
#include <regex>

#include "uuid/uuid.h"
#include "_c_carLogo.h"
#include "base/helper/HelperFile.h"
#include "../include/checkLic.h"

class cheBiaoItem {
public:
    std::string src;
    std::string dest;
};

std::vector<cheBiaoItem> cheBiaoVector = {
    {"S7","北汽幻速"},
    {"S3","北汽幻速"},
    {"S5","北汽幻速"},
    {"S6","北汽幻速"},
    {"H2","北汽幻速"},
    {"H6","北汽幻速"},
    {"H3","北汽幻速"},
    {"S2","北汽幻速"},
    {"H5","北汽幻速"},

    {"E-PACE","捷豹"},
    {"XEL","捷豹"},
    {"XFL","捷豹"},
    {"F-PACE","捷豹"},
    {"XE","捷豹"},
    {"XF","捷豹"},
    {"XJ","捷豹"},
    {"F-TYPE","捷豹"},
    {"I-PACE","捷豹"},
    {"S-TYPE","捷豹"},
    {"XK","捷豹"},

    {"M20","北汽威旺"},
    {"M50F","北汽威旺"},
    {"M30","北汽威旺"},
    {"M60","北汽威旺"},
    {"S50","北汽威旺"},
    {"306","北汽威旺"},
    {"307","北汽威旺"},
    {"205","北汽威旺"},
    {"M35","北汽威旺"},

    {"A1","奥迪"},
    {"A3","奥迪"},
    {"A4","奥迪"},
    {"A5","奥迪"},
    {"A6","奥迪"},
    {"A7","奥迪"},
    {"A8","奥迪"},
    {"Q1","奥迪"},
    {"Q2","奥迪"},
    {"Q3","奥迪"},
    {"Q5","奥迪"},
    {"Q7","奥迪"},
    {"TT","奥迪"},
    {"TTS","奥迪"},
    {"TTRS","奥迪"},
    {"R8","奥迪"},
    {"S3","奥迪"},
    {"S4","奥迪"},
    {"S5","奥迪"},
    {"S6","奥迪"},
    {"S7","奥迪"},
    {"S8","奥迪"},
    {"RS3","奥迪"},
    {"RS6","奥迪"},
    {"RS7","奥迪"},
    {"SQ5","奥迪"},

    {"阿莱罗","奥斯莫比尔"},
    {"Alero","奥斯莫比尔"},
    {"曙光","奥斯莫比尔"},
    {"Aurora","奥斯莫比尔"},
    {"短剑","奥斯莫比尔"},
    {"Cutlass","奥斯莫比尔"},
    {"激情","奥斯莫比尔"},
    {"Intrigue","奥斯莫比尔"},
    {"88","奥斯莫比尔"},
    {"Eightyeight","奥斯莫比尔"},
    {"摄政王","奥斯莫比尔"},
    {"Regency","奥斯莫比尔"},
    {"剪影厢体车","奥斯莫比尔"},
    {"Silhouette","奥斯莫比尔"},

    {"911","保时捷"},
    {"Cayenne","保时捷"},
    {"Panamera","保时捷"},
    {"Macan","保时捷"},
    {"718","保时捷"},
    {"凯宴","保时捷"},
    {"帕纳美拉 GTS","保时捷"},
    {"帕纳美拉","保时捷"},
    {"博斯特","保时捷"},
    {"卡雷拉","保时捷"},

    {"730","宝骏"},
    {"560","宝骏"},
    {"310","宝骏"},
    {"510","宝骏"},
    {"530","宝骏"},
    {"360","宝骏"},
    {"100","宝骏"},
    {"200","宝骏"},

    {"1系","宝马"},
    {"2系","宝马"},
    {"3系","宝马"},
    {"4系","宝马"},
    {"5系","宝马"},
    {"6系","宝马"},
    {"7系","宝马"},
    {"X1","宝马"},
    {"X3","宝马"},
    {"X4","宝马"},
    {"X5","宝马"},
    {"X6","宝马"},
    {"i3","宝马"},
    {"i8","宝马"},
    {"M3","宝马"},
    {"M2","宝马"},
    {"M4","宝马"},
    {"M5","宝马"},
    {"M6","宝马"},

    {"BJ20","北京汽车"},
    {"BJ40","北京汽车"},
    {"BJ80","北京汽车"},

    {"途胜","现代"},
    {"悦动","现代"},
    {"ix25","现代"},
    {"ix35","现代"},
    {"飞思","现代"},
    {"辉翼","现代"},
    {"瑞纳","现代"},
    {"VERNA","现代"},
    {"朗动","现代"},
    {"全新胜达","现代"},
    {"名图","现代"},
    {"MISTRA","现代"},
    {"瑞奕","现代"},
    {"捷恩斯","现代"},
    {"伊兰特","现代"},
    {"酷派","现代"},
    {"胜达","现代"},
    {"维拉克斯","现代"},
    {"雅尊","现代"},
    {"君爵","现代"},



    {"A级","奔驰"},
    {"B级","奔驰"},
    {"C级","奔驰"},
    {"CL级","奔驰"},
    {"CLK级","奔驰"},
    {"CLS级","奔驰"},
    {"E级","奔驰"},
    {"S级","奔驰"},
    {"SL级","奔驰"},
    {"SLC级","奔驰"},
    {"SLK级","奔驰"},
    {"SLR级","奔驰"},
    {"G级","奔驰"},
    {"GLK级","奔驰"},
    {"M级","奔驰"},
    {"R级","奔驰"},
    {"AMG车系","奔驰"},
    {"威霆","奔驰"},
    {"Vito","奔驰"},
    {"威雷","奔驰"},
    {"Vario","奔驰"},
    {"凌特","奔驰"},
    {"Sprinter","奔驰"},
    {"Travego","奔驰"},
    {"Tourismo","奔驰"},
    {"Travego","奔驰"},
    {"Tourino","奔驰"},
    {"Minibus","奔驰"},
    {"唯雅诺","奔驰"},
    {"Viano","奔驰"},

    {"奥德赛","本田"},
    {"飞度","本田"},
    {"缤智","本田"},
    {"锋范","本田"},
    {"冠道","本田"},
    {"歌诗图","本田"},
    {"凌派","本田"},
    {"雅阁","本田"},
    {"雅阁锐·混动","本田"},
    {"CR-Z","本田"},
    {"Insight","本田"},
    {"CR-V锐·混动","本田"},
    {"UR-V","本田"},
    {"XR-V","本田"},
    {"艾力绅","本田"},
    {"哥瑞","本田"},
    {"INSPIRE锐·混动","本田"},
    {"杰德","本田"},
    {"竞瑞","本田"},
    {"思铂睿","本田"},
    {"思铂睿锐·混动","本田"},
    {"思域","本田"},
    {"思域新能源","本田"},
    {"阿科德","本田"},
    {"思迪","本田"},
    {"思铭","本田"},




    {"e6","比亚迪"},
    {"秦","比亚迪"},
    {"王朝概念车","比亚迪"},
    {"唐","比亚迪"},
    {"F0","比亚迪"},
    {"F3","比亚迪"},
    {"速锐","比亚迪"},
    {"元EV","比亚迪"},
    {"G5","比亚迪"},
    {"秦Pro","比亚迪"},
    {"宋","比亚迪"},
    {"宋MAX","比亚迪"},
    {"S7","比亚迪"},
    {"M6","比亚迪"},
    {"秦Pro DM","比亚迪"},
    {"G6","比亚迪"},
    {"秦Pro EV","比亚迪"},
    {"宋DM","比亚迪"},
    {"宋EV","比亚迪"},
    {"秦100","比亚迪"},
    {"e5","比亚迪"},
    {"唐DM","比亚迪"},
    {"秦EV","比亚迪"},
    {"唐100","比亚迪"},

    {"207三厢","标致"},
    {"206","标致"},
    {"207两厢","标致"},
    {"307三厢","标致"},
    {"408","标致"},
    {"308","标致"},
    {"307两厢","标致"},
    {"301","标致"},
    {"308S","标致"},
    {"407","标致"},
    {"508","标致"},
    {"607","标致"},
    {"3008","标致"},
    {"2008","标致"},
    {"4008","标致"},
    {"5008","标致"},
    {"207CC","标致"},
    {"307CC","标致"},
    {"308CC","标致"},
    {"206","标致"},
    {"RCZ","标致"},
    {"308SW","标致"},
    {"407SW","标致"},
    {"307SW","标致"},
    {"107","标致"},
    {"108","标致"},
    {"2008","标致"},
    {"208","标致"},
    {"208GTI","标致"},
    {"301","标致"},
    {"308","标致"},
    {"308GTi","标致"},
    {"308R","标致"},
    {"403","标致"},
    {"404","标致"},
    {"406","标致"},
    {"5008 MPV","标致"},
    {"508","标致"},
    {"508RXH","标致"},
    {"807","标致"},
    {"EX1","标致"},
    {"Fractal","标致"},
    {"HR1","标致"},
    {"iOn","标致"},
    {"Onyx","标致"},
    {"SXC","标致"},
    {"5008","标致"},

    {"昂科拉","别克"},
    {"Encore","别克"},
    {"昂科雷","别克"},
    {"Enclave","别克"},
    {"荣御","别克"},
    {"Royaum","别克"},
    {"君威","别克"},
    {"Regal","别克"},
    {"君越","别克"},
    {"凯越","别克"},
    {"Excelle","别克"},
    {"英朗","别克"},
    {"林荫大道","别克"},
    {"Park Avenue","别克"},
    {"BUICK","别克"},


    {"雅致","宾利"},
    {"慕尚","宾利"},
    {"飞驰","宾利"},
    {"添越","宾利"},
    {"欧陆","宾利"},
    {"雅骏","宾利"},
    {"本特利","宾利"},


    {"爱迪尔","昌河"},
    {"北斗星E","昌河"},
    {"北斗星X5E","昌河"},
    {"北斗星","昌河"},
    {"M50","昌河"},
    {"Q35","昌河"},
    {"福运","昌河"},
    {"海豚","昌河"},

    {"奔奔","长安"},
    {"奔奔EV","长安"},
    {"奔奔I","长安"},
    {"CS15","长安"},
    {"CS35","长安"},
    {"CS55","长安"},
    {"CS75","长安"},
    {"CS95","长安"},
    {"CX30","长安"},
    {"凌轩","长安"},
    {"睿骋","长安"},
    {"睿骋CC","长安"},
    {"逸动","长安"},
    {"逸动DT","长安"},
    {"逸动新能源","长安"},
    {"逸动XT","长安"},
    {"悦翔","长安"},
    {"悦翔V3","长安"},
    {"悦翔V5","长安"},
    {"悦翔V7","长安"},
    {"CS35 PLUS","长安"},

    {"风骏5","长城"},
    {"风骏7","长城"},
    {"风骏6","长城"},
    {"风骏房车","长城"},
    {"M4","长城"},
    {"C30","长城"},
    {"C50","长城"},
    {"C30新能源","长城"},
    {"M2","长城"},
    {"炫丽","长城"},
    {"酷熊","长城"},
    {"V80","长城"},
    {"M1","长城"},
    {"C20R","长城"},
    {"赛弗","长城"},
    {"精灵","长城"},
    {"凌傲","长城"},
    {"风骏3","长城"},
    {"嘉誉","长城"},
    {"赛影","长城"},
    {"金迪尔","长城"},
    {"赛铃","长城"},

    {"RX6478A","大地"},
    {"RX6405","大地"},
    {"RX6400","大地"},
    {"RX6478","大地"},
    {"RX6400Y","大地"},
    {"RX6480","大地"},
    {"RX6481","大地"},
    {"RX6481A","大地"},
    {"RX6473","大地"},
    {"RX6510","大地"},
    {"RX6472Y","大地"},
    {"RX6470Y","大地"},
    {"RX6430Y","大地"},

    {"G50","大通"},
    {"D90","大通"},
    {"G10","大通"},
    {"V80","大通"},
    {"T60","大通"},
    {"EV30","大通"},
    {"EG10","大通"},

    {"朗逸","大众"},
    {"帕萨特","大众"},
    {"途岳","大众"},
    {"途观L","大众"},
    {"凌渡","大众"},
    {"途昂","大众"},
    {"桑塔纳","大众"},
    {"途观","大众"},
    {"POLO","大众"},
    {"波罗","大众"},
    {"辉昂","大众"},
    {"途安L","大众"},
    {"朗行","大众"},
    {"朗境","大众"},
    {"途安","大众"},
    {"高尔","大众"},
    {"T-Cross","大众"},
    {"捷达","大众"},
    {"探岳","大众"},
    {"迈腾","大众"},
    {"探歌","大众"},
    {"速腾","大众"},
    {"宝来","大众"},
    {"CC","大众"},
    {"高尔夫","大众"},
    {"蔚领","大众"},
    {"高尔夫·嘉旅","大众"},
    {"开迪","大众"},
    {"途锐","大众"},
    {"甲壳虫","大众"},
    {"夏朗","大众"},
    {"Tiguan","大众"},
    {"蔚揽","大众"},
    {"迈特威","大众"},
    {"凯路威","大众"},
    {"辉腾","大众"},
    {"尚酷","大众"},
    {"Eos","大众"},
    {"Amarok","大众"},
    {"途观L PHEV","大众"},
    {"帕萨特 PHEV","大众"},
    {"途威","大众"},
    {"桑塔纳(SANTANA VISTA)","大众"},
    {"桑塔纳","大众"},


    {"酷威","道奇"},
    {"RAM","道奇"},
    {"酷搏","道奇"},
    {"锋哲","道奇"},
    {"凯领","道奇"},

    {"帅客","东风"},
    {"帅客EV","东风"},
    {"锐骐6","东风"},
    {"锐骐皮卡","东风"},
    {"锐骐厢式车","东风"},
    {"俊风","东风"},
    {"奥丁","东风"},
    {"御轩","东风"},
    {"俊风ER30","东风"},
    {"俊风E11K","东风"},
    {"俊风E17","东风"},
    {"御风S16","东风"},
    {"御风P16","东风"},
    {"御风","东风"},
    {"御风A100","东风"},
    {"俊风EJ30","东风"},
    {"猛士","东风"},
    {"俊风CV03","东风"},
    {"风神","东风"},

    {"轩逸","东风日产"},
    {"奇骏","东风日产"},
    {"逍客","东风日产"},
    {"天籁","东风日产"},
    {"蓝鸟","东风日产"},
    {"楼兰","东风日产"},
    {"劲客","东风日产"},
    {"骐达","东风日产"},
    {"阳光","东风日产"},
    {"骊威","东风日产"},
    {"西玛","东风日产"},
    {"颐达","东风日产"},
    {"玛驰","东风日产"},
    {"骏逸","东风日产"},
    {"尼桑","东风日产"},
    {"风度","东风日产"},
    {"思威","东风日产"},


    {"得利卡","东南"},
    {"富利卡","东南"},
    {"菱利","东南"},
    {"V3菱悦","东南"},
    {"君阁","东南"},
    {"蓝瑟","东南"},
    {"LANCER","东南"},
    {"蓝瑟翼神","东南"},
    {"戈蓝","东南"},

    {"488","法拉利"},
    {"Portofino","法拉利"},
    {"812Superfast","法拉利"},
    {"GTC4Lusso","法拉利"},
    {"458","法拉利"},
    {"LaFerrari","法拉利"},
    {"California T","法拉利"},
    {"F430","法拉利"},
    {"ENZO","法拉利"},
    {"F12berlinetta","法拉利"},
    {"FF","法拉利"},
    {"456M","法拉利"},
    {"599","法拉利"},
    {"612 Scaglietti","法拉利"},
    {"360 Modena","法拉利"},
    {"575M Maranello","法拉利"},

    {"致悦","菲亚特"},
    {"菲翔","菲亚特"},
    {"500","菲亚特"},
    {"菲跃","菲亚特"},
    {"博悦","菲亚特"},
    {"Doblo","菲亚特"},
    {"朋多","菲亚特"},
    {"领雅","菲亚特"},
    {"西耶那","菲亚特"},
    {"派力奥","菲亚特"},
    {"周末风","菲亚特"},
    {"派朗","菲亚特"},

    {"卡罗拉","丰田"},
    {"凯美瑞","丰田"},
    {"RAV4荣放","丰田"},
    {"汉兰达","丰田"},
    {"普拉多","丰田"},
    {"威驰","丰田"},
    {"皇冠","丰田"},
    {"雷凌","丰田"},
    {"YARiS L 致炫","丰田"},
    {"普拉多中东版","丰田"},
    {"兰德酷路泽","丰田"},
    {"奕泽","丰田"},
    {"IZOA","丰田"},
    {"兰德酷路泽中东版","丰田"},
    {"C-HR","丰田"},
    {"YARiS L 致享","丰田"},
    {"威驰FS","丰田"},
    {"逸致","丰田"},
    {"塞纳墨版","丰田"},
    {"埃尔法","丰田"},
    {"塞纳加规版","丰田"},
    {"亚洲龙","丰田"},
    {"穿越者中东版","丰田"},
    {"86","丰田"},
    {"普瑞维亚","丰田"},
    {"塞纳美规版","丰田"},
    {"LC76中东版","丰田"},
    {"Sienna","丰田"},
    {"普瑞维亚中东版","丰田"},
    {"坦途加规版","丰田"},
    {"坦途美规版","丰田"},
    {"埃尔法欧版","丰田"},
    {"红杉墨版","丰田"},
    {"柯斯达","丰田"},
    {"FJ酷路泽中东版","丰田"},
    {"超霸加规版","丰田"},
    {"超霸美规版","丰田"},
    {"红杉加版","丰田"},
    {"HIACE","丰田"},
    {"海拉克斯中东版","丰田"},
    {"塔库玛美规版","丰田"},
    {"考斯特中东版","丰田"},
    {"广汽ix4","丰田"},
    {"海狮中东版","丰田"},
    {"塔库玛加规版","丰田"},
    {"世纪","丰田"},
    {"揽驰","丰田"},
    {"奔跑者","丰田"},
    {"穿跃者","丰田"},
    {"巡洋舰","丰田"},
    {"海艾士","丰田"},
    {"佳美","丰田"},
    {"凌志","丰田"},
    {"杰路驰","丰田"},


    {"EX80","福汽启腾"},
    {"M70","福汽启腾"},
    {"V60","福汽启腾"},
    {"M70 EV","福汽启腾"},

    {"翼搏","福特"},
    {"翼虎","福特"},
    {"锐界","福特"},
    {"福睿斯","福特"},
    {"福克斯","福特"},
    {"蒙迪欧","福特"},
    {"金牛座","福特"},
    {"撼路者","福特"},
    {"途睿欧","福特"},
    {"全顺","福特"},
    {"新世代全顺","福特"},
    {"探险者","福特"},
    {"MUSTANG","福特"},
    {"F-150","福特"},
    {"Ranger","福特"},
    {"C-MAX","福特"},
    {"领界","福特"},
    {"嘉年华","福特"},
    {"麦柯斯","福特"},
    {"经典全顺","福特"},
    {"Flex","福特"},
    {"外交官","福特"},
    {"征服者","福特"},
    {"嘉年华ST","福特"},
    {"E系列","福特"},
    {"猛禽","福特"},


    {"图雅诺","福田"},
    {"时代驭菱","福田"},
    {"风景G7","福田"},
    {"奥铃捷运","福田"},
    {"蒙派克E","福田"},
    {"风景G9","福田"},
    {"风景","福田"},
    {"时代微卡","福田"},
    {"奥铃CTX","福田"},
    {"祥菱V","福田"},
    {"奥铃TX","福田"},
    {"欧马可","福田"},
    {"时代领航","福田"},
    {"瑞沃工程用车","福田"},
    {"时代康瑞","福田"},
    {"风景V5","福田"},
    {"风景V3","福田"},
    {"祥菱M","福田"},
    {"时代骁运","福田"},
    {"风景快客","福田"},
    {"迷迪","福田"},
    {"传奇X","福田"},
    {"伽途V3","福田"},
    {"海狮","福田"},
    {"风景快捷","福田"},
    {"伽途V5","福田"},
    {"风景冲浪","福田"},
    {"祥菱S","福田"},
    {"拓陆者","福田"},
    {"萨瓦纳","福田"},
    {"伽途ix","福田"},
    {"伽途GT","福田"},
    {"萨普","福田"},
    {"伽途im","福田"},
    {"风景V5EV","福田"},
    {"奥铃EV","福田"},
    {"图雅诺EV","福田"},
    {"风景V3EV","福田"},

    {"5","观致"},
    {"3","观致"},
    {"Model Young","观致"},
    {"3 EV","观致"},

    {"GM6","传祺"},
    {"GS5","传祺"},
    {"GA4","传祺"},
    {"GM8","传祺"},
    {"GS7","传祺"},
    {"GS3","传祺"},
    {"GS4","传祺"},
    {"GS8","传祺"},
    {"GA6","传祺"},
    {"GA8","传祺"},
    {"GA3S","传祺"},
    {"GS5 Super","传祺"},
    {"GS5","传祺"},
    {"GA5","传祺"},

    {"帅舰","吉奥"},
    {"GS50","吉奥"},
    {"G5","吉奥"},
    {"帅豹","吉奥"},
    {"GX6","吉奥"},
    {"GX5","吉奥"},
    {"星朗","吉奥"},
    {"财运100","吉奥"},
    {"吉奥E美","吉奥"},
    {"财运300","吉奥"},
    {"财运500","吉奥"},
    {"吉奥GP150","吉奥"},
    {"星旺L","吉奥"},
    {"柴神","吉奥"},
    {"星旺","吉奥"},
    {"凯睿","吉奥"},
    {"奥轩G3","吉奥"},
    {"星旺CL","吉奥"},
    {"星旺M1","吉奥"},
    {"星旺M2","吉奥"},

    {"锐意","哈飞"},
    {"民意","哈飞"},
    {"赛豹Ⅲ","哈飞"},
    {"路宝","哈飞"},
    {"赛马","哈飞"},
    {"中意","哈飞"},
    {"路尊大霸王","哈飞"},
    {"松花江","哈飞"},
    {"路尊小霸王","哈飞"},
    {"赛豹V系","哈飞"},
    {"骏意","哈飞"},
    {"单双排","哈飞"},
    {"普面","哈飞"},
    {"百利","哈飞"},

    {"H6","哈弗"},
    {"F5","哈弗"},
    {"M6","哈弗"},
    {"H2","哈弗"},
    {"H2s","哈弗"},
    {"H9","哈弗"},
    {"F7","哈弗"},
    {"H6 Coupe","哈弗"},
    {"H4","哈弗"},
    {"H7","哈弗"},
    {"H5","哈弗"},
    {"H8","哈弗"},
    {"H1","哈弗"},
    {"H3","哈弗"},

    {"H5C","海格"},
    {"H5V","海格"},

    {"S5","海马"},
    {"M3","海马"},
    {"S5青春版","海马"},
    {"M6","海马"},
    {"王子","海马"},
    {"福仕达鸿达","海马"},
    {"爱尚","海马"},
    {"福仕达新鸿达","海马"},
    {"福仕达荣达","海马"},
    {"福仕达福卡","海马"},
    {"腾达","海马"},
    {"福仕达腾达","海马"},
    {"福美来F5","海马"},
    {"福美来F7","海马"},
    {"S7","海马"},
    {"马自达323","海马"},
    {"普力马","海马"},
    {"M8","海马"},
    {"丘比特","海马"},
    {"海福星","海马"},
    {"骑士","海马"},
    {"欢动","海马"},
    {"E3","海马"},
    {"爱尚EV","海马"},


    {"H5","红旗"},
    {"H7","红旗"},
    {"盛世","红旗"},
    {"明仕","红旗"},
    {"世纪星","红旗"},
    {"L5","红旗"},
    {"HS7","红旗"},

    {"闪闪X2","红星"},

    {"海景","华普"},
    {"飚风","华普"},
    {"海锋","华普"},
    {"海尚","华普"},
    {"海迅","华普"},
    {"海炫","华普"},
    {"海域","华普"},
    {"海悦","华普"},
    {"杰士达美鹿","华普"},
    {"朗风","华普"},
    {"M203","华普"},

    {"N3","黄海"},
    {"N2","黄海"},
    {"N1S","黄海"},
    {"N1","黄海"},
    {"傲骏","黄海"},
    {"旗胜F1","黄海"},
    {"挑战者","黄海"},
    {"大柴神","黄海"},
    {"旗胜V3","黄海"},
    {"傲龙CUV","黄海"},
    {"翱龙CUV","黄海"},
    {"领航者","黄海"},
    {"瑞途","黄海"},
    {"旗胜CUV","黄海"},
    {"曙光骄子","黄海"},
    {"征服者","黄海"},
    {"翱龙SUV","黄海"},
    {"傲羚","黄海"},
    {"小柴神","黄海"},
    {"翱龙","吉利"},

    {"缤越","吉利"},
    {"缤瑞","吉利"},
    {"博越","吉利"},
    {"帝豪GS","吉利"},
    {"远景X3","吉利"},
    {"帝豪GL","吉利"},
    {"帝豪","吉利"},
    {"博瑞GE","吉利"},
    {"远景","吉利"},
    {"远景SUV","吉利"},
    {"远景S1","吉利"},
    {"博瑞","吉利"},
    {"远景X1","吉利"},
    {"金刚","吉利"},
    {"熊猫","吉利"},
    {"GX7","吉利"},
    {"自由舰","吉利"},
    {"EC8","吉利"},
    {"TX4","吉利"},
    {"中国龙","吉利"},
    {"美人豹","吉利"},
    {"GC7","吉利"},
    {"海景","吉利"},
    {"美日","吉利"},
    {"豪情SUV","吉利"},
    {"GX2","吉利"},
    {"SX7","吉利"},
    {"英伦C5","吉利"},
    {"SC3","吉利"},
    {"美日之星","吉利"},
    {"豪情","吉利"},
    {"优利欧","吉利"},
    {"嘉际","吉利"},
    {"博瑞GE PHEV","吉利"},
    {"帝豪Gse","吉利"},
    {"帝豪EV","吉利"},
    {"帝豪PHEV","吉利"},
    {"嘉际PHEV","吉利"},
    {"吉利GE11","吉利"},

    {"自由光","吉普"},
    {"牧马人","吉普"},
    {"指南者","吉普"},
    {"自由侠","吉普"},
    {"大切诺基","吉普"},
    {"大切诺基 SRT","吉普"},
    {"大指挥官","吉普"},
    {"指挥官","吉普"},
    {"大指挥官混动","吉普"},
    {"自由光混动","吉普"},
    {"悦界PHEV","吉普"},

    {"瑞风S3","江淮"},
    {"瑞风M4","江淮"},
    {"瑞风M3","江淮"},
    {"瑞风S7","江淮"},
    {"瑞风R3","江淮"},
    {"帅铃T8","江淮"},
    {"瑞风M5","江淮"},
    {"瑞风S2","江淮"},
    {"瑞风S2mini","江淮"},
    {"瑞风S4","江淮"},
    {"瑞风S5","江淮"},
    {"帅铃T6","江淮"},
    {"瑞风M6","江淮"},
    {"星锐","江淮"},
    {"和悦","江淮"},
    {"瑞风A60","江淮"},
    {"江淮V7","江淮"},
    {"帅铃V6","江淮"},
    {"瑞风","江淮"},
    {"瑞鹰","江淮"},
    {"瑞风M2","江淮"},
    {"宾悦","江淮"},
    {"和悦A30","江淮"},
    {"悦悦","江淮"},
    {"和悦A13","江淮"},
    {"瑞铃","江淮"},
    {"iEV6E","江淮"},
    {"iEV7S","江淮"},
    {"iEVA50","江淮"},
    {"iEV4","江淮"},
    {"iEV6S","江淮"},
    {"iEV7","江淮"},
    {"iEVA60","江淮"},
    {"iEVS4","江淮"},

    {"域虎7","江铃"},
    {"特顺","江铃"},
    {"域虎3","江铃"},
    {"宝典","江铃"},
    {"域虎5","江铃"},
    {"凯运升级版","江铃"},
    {"顺达窄体","江铃"},
    {"顺达宽体","江铃"},
    {"凯锐800","江铃"},
    {"凯锐","江铃"},
    {"宝威","江铃"},
    {"凯威","江铃"},
    {"E400","江铃"},
    {"E200L","江铃"},
    {"E200N","江铃"},
    {"E100B","江铃"},
    {"E160","江铃"},
    {"易至EV3","江铃"},
    {"骐铃T7","江铃"},
    {"骐铃T100","江铃"},
    {"骐铃T5","江铃"},
    {"骐铃T3","江铃"},

    {"海狮","金杯"},
    {"阁瑞斯","金杯"},
    {"F50","金杯"},
    {"大海狮","金杯"},
    {"霸道SUV","金杯"},
    {"海星","金杯"},
    {"华晨金杯S50","金杯"},
    {"海狮X30L","金杯"},
    {"小海狮X30","金杯"},
    {"750","金杯"},
    {"新海狮S","金杯"},
    {"T32","金杯"},
    {"T52","金杯"},
    {"T30","金杯"},
    {"A7","金杯"},
    {"T50","金杯"},
    {"T20","金杯"},
    {"A9","金杯"},
    {"T22","金杯"},
    {"S70","金杯"},
    {"智尚S35","金杯"},
    {"金典","金杯"},
    {"大力神K5","金杯"},
    {"西部牛仔","金杯"},
    {"雷龙","金杯"},
    {"小金牛","金杯"},
    {"海狮X30L EV","金杯"},
    {"观境","金杯"},
    {"领坤EV","金杯"},

    {"金威","金龙"},
    {"凯歌","金龙"},
    {"凯特","金龙"},
    {"凯锐浩克","金龙"},
    {"金龙海狮","金龙"},

    {"海狮","金旅"},

    {"艾菲","九龙"},
    {"商务车","九龙"},
    {"考斯特","九龙"},
    {"专用车","九龙"},
    {"EM3","九龙"},
    {"EM5","九龙"},

    {"K50","开瑞"},
    {"K60","开瑞"},
    {"优优","开瑞"},
    {"优劲","开瑞"},
    {"优雅","开瑞"},
    {"爱卡","开瑞"},
    {"杰虎","开瑞"},
    {"优胜","开瑞"},
    {"优翼","开瑞"},
    {"优派","开瑞"},
    {"K60EV","开瑞"},
    {"K50EV","开瑞"},
    {"优优EV","开瑞"},
    {"优劲EV","开瑞"},

    {"XT4","凯迪拉克"},
    {"ATS-L","凯迪拉克"},
    {"XT5","凯迪拉克"},
    {"XTS","凯迪拉克"},
    {"CT6","凯迪拉克"},
    {"SLS赛威","凯迪拉克"},
    {"凯雷德","凯迪拉克"},
    {"CTS","凯迪拉克"},
    {"SRX","凯迪拉克"},
    {"ATS","凯迪拉克"},
    {"XLR","凯迪拉克"},
    {"XT6","凯迪拉克"},
    {"卡雷德","凯迪拉克"},

    {"300C","克莱斯勒"},
    {"大捷龙","克莱斯勒"},
    {"PT漫步者","克莱斯勒"},
    {"赛百灵","克莱斯勒"},
    {"城乡","克莱斯勒"},
    {"交叉火力","克莱斯勒"},
    {"铂锐","克莱斯勒"},

    {"Urus","兰博基尼"},
    {"Aventador","兰博基尼"},
    {"Asterion","兰博基尼"},
    {"Centenario","兰博基尼"},
    {"Diablo","兰博基尼"},
    {"Egoista","兰博基尼"},
    {"Terzo Millennio","兰博基尼"},
    {"Veneno","兰博基尼"},
    {"LM002","兰博基尼"},
    {"Estoque","兰博基尼"},
    {"Gallardo","兰博基尼"},
    {"Murcielago","兰博基尼"},
    {"Reventon","兰博基尼"},
    {"Sesto Elemento","兰博基尼"},

    {"ES","雷克萨斯"},
    {"NX","雷克萨斯"},
    {"RX","雷克萨斯"},
    {"LX","雷克萨斯"},
    {"LS","雷克萨斯"},
    {"CT","雷克萨斯"},
    {"IS","雷克萨斯"},
    {"GS","雷克萨斯"},
    {"LC","雷克萨斯"},
    {"RC","雷克萨斯"},
    {"GX","雷克萨斯"},
    {"SC","雷克萨斯"},
    {"UX","雷克萨斯"},

    {"ESPACE","雷诺"},
    {"卡缤","雷诺"},
    {"梅甘娜","雷诺"},
    {"科雷傲","雷诺"},
    {"风朗","雷诺"},
    {"风景","雷诺"},
    {"塔利斯曼","雷诺"},
    {"纬度","雷诺"},
    {"拉古那","雷诺"},
    {"威赛帝","雷诺"},

    {"VE-1","理念"},
    {"S1","理念"},

    {"320","力帆"},
    {"330","力帆"},
    {"520","力帆"},
    {"520i","力帆"},
    {"530","力帆"},
    {"620","力帆"},
    {"630","力帆"},
    {"650","力帆"},
    {"720","力帆"},
    {"820","力帆"},
    {"丰顺","力帆"},
    {"福顺","力帆"},
    {"乐途","力帆"},
    {"X50","力帆"},
    {"X60","力帆"},
    {"X80","力帆"},
    {"兴顺","力帆"},
    {"迈威","力帆"},
    {"轩朗","力帆"},

    {"L3","莲花"},
    {"L5","莲花"},
    {"竞悦","莲花"},

    {"Mattu","猎豹"},
    {"CS9","猎豹"},
    {"CS10","猎豹"},
    {"Q6","猎豹"},
    {"CT7","猎豹"},
    {"黑金刚","猎豹"},
    {"飞腾","猎豹"},
    {"6481","猎豹"},
    {"骐菱","猎豹"},
    {"CS6","猎豹"},
    {"CT5皮卡","猎豹"},
    {"CS7","猎豹"},
    {"皮卡","猎豹"},
    {"长丰DUV","猎豹"},
    {"飞扬皮卡","猎豹"},
    {"飞腾C5","猎豹"},
    {"福铃皮卡","猎豹"},
    {"飞扬SUV","猎豹"},
    {"飞铃SUV","猎豹"},
    {"金麒麟","猎豹"},

    {"MKC","林肯"},
    {"MKZ","林肯"},
    {"领航员","林肯"},
    {"大陆","林肯"},
    {"MKX","林肯"},
    {"MKT","林肯"},
    {"MKS","林肯"},
    {"航海家","林肯"},
    {"飞行家","林肯"},

    {"维特拉","铃木"},
    {"骁途","铃木"},
    {"奥拓","铃木"},
    {"雨燕","铃木"},
    {"启悦","铃木"},
    {"天语 SX4","铃木"},
    {"北斗星","铃木"},
    {"北斗星X5","铃木"},
    {"吉姆尼","铃木"},
    {"英格尼斯","铃木"},
    {"超级维特拉","铃木"},
    {"锋驭","铃木"},
    {"羚羊","铃木"},
    {"尚悦","铃木"},
    {"派喜","铃木"},
    {"利亚纳","铃木"},
    {"利亚纳A6","铃木"},
    {"浪迪","铃木"},
    {"速翼特","铃木"},
    {"凯泽西","铃木"},

    {"揽胜","路虎"},
    {"运动","路虎"},
    {"揽胜星脉","路虎"},
    {"发现","路虎"},
    {"揽胜极光","路虎"},
    {"卫士","路虎"},
    {"发现神行","路虎"},
    {"神行者","路虎"},

    {"X7","陆风"},
    {"劲越","陆风"},
    {"逍遥","陆风"},
    {"X2","陆风"},
    {"X8","陆风"},
    {"X5","陆风"},
    {"X6","陆风"},
    {"风尚","陆风"},
    {"X9","陆风"},
    {"风华","陆风"},
    {"新饰界","陆风"},

    {"Levante","玛莎拉蒂"},
    {"Ghibli","玛莎拉蒂"},
    {"Quattroporte","玛莎拉蒂"},
    {"GranCabrio","玛莎拉蒂"},
    {"GranTurismo","玛莎拉蒂"},
    {"spyder","玛莎拉蒂"},
    {"Coupe","玛莎拉蒂"},
    {"GranSport","玛莎拉蒂"},
    {"总裁","玛莎拉蒂"},
    {"玛莎GT敞篷","玛莎拉蒂"},





    {"昂克赛拉","马自达"},
    {"CX-5","马自达"},
    {"CX-8","马自达"},
    {"3星骋","马自达"},

    {"CLUBMAN","迷你"},
    {"COUNTRYMAN","迷你"},
    {"CABRIO","迷你"},
    {"COUPE","迷你"},
    {"PACEMAN","迷你"},
    {"ROADSTER","迷你"},
    {"JCW COUNTRYMAN","迷你"},
    {"JCW","迷你"},
    {"JCW CLUBMAN","迷你"},
    {"JCW COUPE","迷你"},
    {"JCW PACEMAN","迷你"},

    {"HS","名爵"},
    {"ZS","名爵"},
    {"GS","名爵"},
    {"3SW","名爵"},
    {"TF","名爵"},

    {"U5 SUV","纳智捷"},
    {"优6 SUV","纳智捷"},
    {"大7 MPV","纳智捷"},
    {"锐3","纳智捷"},
    {"MASTER CEO","纳智捷"},
    {"大7 SUV","纳智捷"},
    {"纳5","纳智捷"},
    {"U5 EV","纳智捷"},

    {"威达","欧宝"},
    {"雅特","欧宝"},
    {"英速亚","欧宝"},
    {"安德拉","欧宝"},
    {"麦瑞纳","欧宝"},
    {"赛飞利","欧宝"},
    {"GT","欧宝"},

    {"CDX","讴歌"},
    {"RDX","讴歌"},
    {"TLX-L","讴歌"},
    {"RDX","讴歌"},
    {"MDX","讴歌"},
    {"NSX","讴歌"},
    {"ZDX","讴歌"},
    {"CDX","讴歌"},
    {"ILX","讴歌"},
    {"TLX","讴歌"},
    {"RLX","讴歌"},
    {"TL","讴歌"},
    {"RL","讴歌"},

    {"爱卡","奇瑞"},
    {"艾瑞泽3","奇瑞"},
    {"艾瑞泽5","奇瑞"},
    {"艾瑞泽7","奇瑞"},
    {"艾瑞泽7e","奇瑞"},
    {"艾瑞泽EX","奇瑞"},
    {"艾瑞泽M7","奇瑞"},
    {"东方之子","奇瑞"},
    {"东方之子Cross","奇瑞"},
    {"风云","奇瑞"},
    {"风云2","奇瑞"},
    {"A1","奇瑞"},
    {"A3","奇瑞"},
    {"A5","奇瑞"},
    {"E3","奇瑞"},
    {"E5","奇瑞"},
    {"QQ","奇瑞"},
    {"QQ3","奇瑞"},
    {"QQ6","奇瑞"},
    {"QQme","奇瑞"},
    {"旗云","奇瑞"},
    {"旗云1","奇瑞"},
    {"旗云2","奇瑞"},
    {"旗云3","奇瑞"},
    {"旗云5","奇瑞"},
    {"瑞虎","奇瑞"},
    {"瑞虎3","奇瑞"},
    {"瑞虎5","奇瑞"},
    {"瑞虎5x","奇瑞"},
    {"瑞虎7","奇瑞"},
    {"瑞虎8","奇瑞"},
    {"艾瑞泽5e","奇瑞"},
    {"奇瑞eQ","奇瑞"},
    {"瑞虎3xe","奇瑞"},

    {"D60","启辰"},
    {"T70","启辰"},
    {"T90","启辰"},
    {"T60","启辰"},
    {"M50V","启辰"},
    {"T70X","启辰"},
    {"R50X","启辰"},
    {"D50","启辰"},
    {"R50","启辰"},
    {"R30","启辰"},
    {"启辰晨风","启辰"},

    {"福瑞迪","起亚"},
    {"K2","起亚"},
    {"K3","起亚"},
    {"K4","起亚"},
    {"K5","起亚"},
    {"KX3","起亚"},
    {"KX5","起亚"},
    {"KX7","起亚"},
    {"赛拉图","起亚"},
    {"狮跑","起亚"},
    {"秀尔","起亚"},
    {"智跑","起亚"},
    {"霸锐","起亚"},
    {"凯尊","起亚"},
    {"K9","起亚"},
    {"VQ","起亚"},
    {"索兰托","起亚"},
    {"速迈","起亚"},
    {"佳乐","起亚"},

    {"350","荣威"},
    {"360","荣威"},
    {"950","荣威"},
    {"e50","荣威"},
    {"e550","荣威"},
    {"e950","荣威"},
    {"Ei5","荣威"},
    {"ei6","荣威"},
    {"i5","荣威"},
    {"i6","荣威"},
    {"RX3","荣威"},
    {"RX5","荣威"},
    {"RX8","荣威"},
    {"W5","荣威"},

    {"9-3","萨博"},
    {"9-5","萨博"},

    {"帕杰罗","三菱"},
    {"蓝瑟","三菱"},
    {"欧蓝德","三菱"},
    {"劲炫","三菱"},
    {"帕杰罗·劲畅","三菱"},
    {"伊柯丽斯","三菱"},
    {"格蓝迪","三菱"},

    {"福家","陕汽通家"},
    {"国金GM3","陕汽通家"},
    {"通家福","陕汽通家"},

    {"来宝S-RV","双环"},
    {"小贵族","双环"},
    {"SCEO","双环"},
    {"来旺","双环"},

    {"主席","双龙"},
    {"雷斯特G4","双龙"},
    {"途凌","双龙"},
    {"爱腾","双龙"},
    {"雷斯特W","双龙"},
    {"柯兰多","双龙"},
    {"路帝","双龙"},
    {"享御","双龙"},
    {"蒂维拉","双龙"},

    {"XV","斯巴鲁"},
    {"森林人","斯巴鲁"},
    {"傲虎","斯巴鲁"},
    {"力狮","斯巴鲁"},
    {"BRZ","斯巴鲁"},
    {"驰鹏","斯巴鲁"},
    {"翼豹","斯巴鲁"},
    {"WRX","斯巴鲁"},

    {"柯珞克","斯柯达"},
    {"明锐","斯柯达"},
    {"柯迪亚克","斯柯达"},
    {"柯米克","斯柯达"},
    {"速派","斯柯达"},
    {"昕锐","斯柯达"},
    {"柯迪亚克GT","斯柯达"},
    {"昕动","斯柯达"},
    {"野帝","斯柯达"},
    {"晶锐","斯柯达"},
    {"昊锐","斯柯达"},
    {"Yeti","斯柯达"},
    {"法比亚","斯柯达"},
    {"欧雅","斯柯达"},
    {"速尊","斯柯达"},

    {"H5","威麟"},
    {"H3","威麟"},
    {"V5","威麟"},
    {"X5","威麟"},

    {"737","潍柴英致"},
    {"G5","潍柴英致"},
    {"727","潍柴英致"},
    {"G3","潍柴英致"},
    {"727","潍柴英致"},
    {"737EV","潍柴英致"},
    {"EX1","潍柴英致"},

    {"C30","沃尔沃"},
    {"S40","沃尔沃"},
    {"V40","沃尔沃"},
    {"S40","沃尔沃"},
    {"S60","沃尔沃"},
    {"S60 Polestar","沃尔沃"},
    {"S60L","沃尔沃"},
    {"S80","沃尔沃"},
    {"S90","沃尔沃"},
    {"S80L","沃尔沃"},
    {"XC60","沃尔沃"},
    {"XC90","沃尔沃"},
    {"XC40","沃尔沃"},
    {"XC CLASSIC","沃尔沃"},
    {"C70","沃尔沃"},
    {"P1800","沃尔沃"},
    {"V60","沃尔沃"},
    {"V60 Polestar","沃尔沃"},
    {"V90","沃尔沃"},

    {"宏光","五菱"},
    {"宏光S","五菱"},
    {"宏光S1","五菱"},
    {"鸿途","五菱"},
    {"荣光","五菱"},
    {"荣光S","五菱"},
    {"荣光V","五菱"},
    {"荣光新卡","五菱"},
    {"荣光小卡","五菱"},
    {"兴旺","五菱"},
    {"征程","五菱"},
    {"之光","五菱"},

    {"庆铃TAGA皮卡","五十铃"},
    {"皮卡","五十铃"},
    {"N系列","五十铃"},
    {"T系列","五十铃"},
    {"F系列","五十铃"},
    {"D-MAX","五十铃"},
    {"mu-X牧游侠","五十铃"},
    {"瑞迈","五十铃"},
    {"铃拓","五十铃"},
    {"MU-X","五十铃"},

    {"沃兰多","雪佛兰"},
    {"科沃兹","雪佛兰"},
    {"探界者","雪佛兰"},
    {"迈锐宝XL","雪佛兰"},
    {"迈锐宝","雪佛兰"},
    {"科鲁兹","雪佛兰"},
    {"赛欧3","雪佛兰"},
    {"创酷","雪佛兰"},
    {"科帕奇","雪佛兰"},
    {"乐风RV","雪佛兰"},
    {"乐风","雪佛兰"},
    {"赛欧","雪佛兰"},
    {"景程","雪佛兰"},
    {"乐骋","雪佛兰"},
    {"爱唯欧","雪佛兰"},
    {"科鲁泽","雪佛兰"},
    {"科迈罗","雪佛兰"},
    {"探际者","雪佛兰"},
    {"索罗德","雪佛兰"},
    {"库罗德","雪佛兰"},
    {"开拓者","雪佛兰"},
    {"沃蓝达","雪佛兰"},
    {"斯帕可","雪佛兰"},
    {"EXPRESS","雪佛兰"},
    {"科尔维特","雪佛兰"},

    {"天逸 C5 AIRCROSS","雪铁龙"},
    {"云逸 C4 AIRCROSS","雪铁龙"},
    {"爱丽舍","雪铁龙"},
    {"C4世嘉","雪铁龙"},
    {"C5","雪铁龙"},
    {"C6","雪铁龙"},
    {"C3-XR","雪铁龙"},
    {"C4L","雪铁龙"},
    {"世嘉","雪铁龙"},
    {"凯旋","雪铁龙"},
    {"富康","雪铁龙"},
    {"C2","雪铁龙"},
    {"萨拉-毕加索","雪铁龙"},
    {"赛纳","雪铁龙"},
    {"C4 PICASSO","雪铁龙"},
    {"C4","雪铁龙"},
    {"C6","雪铁龙"},
    {"C5","雪铁龙"},
    {"C4 AIRCROSS","雪铁龙"},
    {"毕加索","雪铁龙"},


    {"猎豹CT5","扬子"},
    {"猎豹飞扬","扬子"},

    {"森雅R9","一汽"},
    {"森雅R7","一汽"},
    {"佳宝V52","一汽"},
    {"佳宝V80","一汽"},
    {"解放T80","一汽"},
    {"V75","一汽"},
    {"V77","一汽"},
    {"佳宝T51","一汽"},
    {"佳宝T57","一汽"},
    {"佳宝T50","一汽"},
    {"佳宝V55","一汽"},
    {"解放T90","一汽"},
    {"森雅M80","一汽"},
    {"森雅S80","一汽"},
    {"佳宝V70","一汽"},
    {"佳宝V70 Ⅱ","一汽"},
    {"奥星","一汽"},

    {"得意","依维柯"},
    {"Daily欧胜","依维柯"},
    {"Power Daily","依维柯"},
    {"Ouba","依维柯"},
    {"Venice","依维柯"},
    {"康果","依维柯"},
    {"都灵","依维柯"},
    {"欧霸","依维柯"},

    {"QX50","英菲尼迪"},
    {"Q50L","英菲尼迪"},
    {"ESQ","英菲尼迪"},
    {"QX30","英菲尼迪"},
    {"QX60","英菲尼迪"},
    {"QX70","英菲尼迪"},
    {"QX80","英菲尼迪"},
    {"Q50","英菲尼迪"},
    {"Q60","英菲尼迪"},
    {"Q70L","英菲尼迪"},
    {"Q30","英菲尼迪"},
    {"EX","英菲尼迪"},
    {"FX","英菲尼迪"},
    {"G","英菲尼迪"},
    {"JX","英菲尼迪"},
    {"M","英菲尼迪"},
    {"QX","永源飞碟"},

    {"UFO","永源飞碟"},
    {"UFO-A380","永源飞碟"},

    {"S330","驭胜"},
    {"S350","驭胜"},

    {"V7","中华"},
    {"V6","中华"},
    {"V3","中华"},
    {"H3","中华"},
    {"V5","中华"},
    {"H530","中华"},
    {"骏捷FRV","中华"},
    {"中华","中华"},
    {"骏捷","中华"},
    {"H330","中华"},
    {"H230","中华"},
    {"酷宝","中华"},
    {"H220","中华"},
    {"骏捷FSV","中华"},
    {"尊驰","中华"},
    {"骏捷Cross","中华"},
    {"H320","中华"},
    {"中华豚","中华"},
    {"H230EV","中华"},

    {"世纪","中顺"},

    {"大领主","中兴"},
    {"小老虎","中兴"},
    {"威虎","中兴"},
    {"旗舰","中兴"},
    {"无限","中兴"},
    {"田野皮卡","中兴"},
    {"中兴老虎","中兴"},
    {"福星皮卡","中兴"},
    {"长铃皮卡","中兴"},
    {"威虎G3","中兴"},
    {"福星SUV","中兴"},
    {"田野SUV","中兴"},
    {"驰野","中兴"},
    {"金狮","中兴"},
    {"海豹","中兴"},
    {"万禧龙","中兴"},
    {"C3","中兴"},
    {"GX3","中兴"},

    {"SR7","众泰"},
    {"SR9","众泰"},
    {"T300","众泰"},
    {"T500","众泰"},
    {"T600","众泰"},
    {"T600 Coupe","众泰"},
    {"T700","众泰"},
    {"T800","众泰"},
    {"大迈X5","众泰"},
    {"大迈X7","众泰"},
    {"Z360","众泰"},
    {"Z560","众泰"},
    {"Z700","众泰"},
    {"Z300","众泰"},
    {"Z500","众泰"},
    {"V10","众泰"},
    {"2008","众泰"},
    {"5008","众泰"},
    {"T200","众泰"},
    {"Z560","众泰"},
    {"Z100","众泰"},
    {"Z200HB","众泰"},
    {"Z200","众泰"},
    {"M300","众泰"},


};
std::string baseTool::formatingTime(std::string  str)
{
    string  stime;
    {   //std::string str = "123:12" ;
        char buffer [50];
        int i = 0, j =0 ;
        sscanf(str.c_str(), "%2d:%2d",&i ,&j) ;
        if(i > 59 || i < 0 )  i=0 ;
        if(j > 59 || j < 0 )  j=0 ;
        sprintf (buffer, "%02d:%02d",i,j);
        stime.append(buffer) ;
    }
    return stime ;
}
int baseTool::strTime2Second(std::string str)
{
     int j =0,i =0;
     sscanf (str.c_str(),"%2d:%2d",&j,&i);
     return j*60 + i ;
}
int baseTool::str2Int(std::string str)
{
    if(str.empty())
    {
        return 0;
    }

    unsigned int strSize = str.size();
    const char *pStr = str.c_str();
    for(unsigned int i = 0; i < strSize; i++)
    {
        if(pStr[i] < 48 && pStr[i] > 57)
        {
            if(pStr[i] != '-')
            {
                return 0;
            }
        }
    }

    return stoi(str);
}

int CreatDir(char *pszDir)
{
    int i = 0;
    int iRet;
    int iLen = strlen(pszDir);
    if (pszDir[iLen - 1] != '\\' && pszDir[iLen - 1] != '/')
    {
        pszDir[iLen] = '/';
        pszDir[iLen + 1] = '\0';
    }
    for (i = 0; i <= iLen; i++)
    {
        if ((pszDir[i] == '\\' || pszDir[i] == '/')&&i!=0)
        {
            pszDir[i] = '\0';
            iRet = access(pszDir, 0);
            if (iRet != 0)
            {
                iRet = mkdir(pszDir, S_IRWXU | S_IRWXG | S_IROTH | S_IXOTH);
                if (iRet != 0)
                {
                    return -1;
                }
            }
            //支持linux,将所有\换成/
            pszDir[i] = '/';
        }
    }
    return 0;
}

int baseTool::CheckDir(std::string Path)
{

    if (access(Path.c_str(), 0) != 0)
    {
        char c_Path[2048] = { 0 };
        sprintf(c_Path,"%s", Path.c_str());
        printf("creat path:%s\n",Path.c_str());
        CreatDir(c_Path);
    }else {
         printf("is path:%s\n",Path.c_str());
    }
    return 1;
}

std::string baseTool::newGuid()
{
    char uuid_str[37];
    uuid_t uuid;

    uuid_clear(uuid);
    uuid_generate_time_safe(uuid);

    uuid_unparse(uuid, uuid_str);

    memcpy(uuid_str + 8, uuid_str + 9, 4);
    memcpy(uuid_str + 12, uuid_str + 14, 4);
    memcpy(uuid_str + 16, uuid_str + 19, 4);
    memcpy(uuid_str + 20, uuid_str + 24, 13);

    return uuid_str;
}

static unsigned short const wCRC16Table[256] = {
    0x0000, 0xC0C1, 0xC181, 0x0140, 0xC301, 0x03C0, 0x0280, 0xC241,
    0xC601, 0x06C0, 0x0780, 0xC741, 0x0500, 0xC5C1, 0xC481, 0x0440,
    0xCC01, 0x0CC0, 0x0D80, 0xCD41, 0x0F00, 0xCFC1, 0xCE81, 0x0E40,
    0x0A00, 0xCAC1, 0xCB81, 0x0B40, 0xC901, 0x09C0, 0x0880, 0xC841,
    0xD801, 0x18C0, 0x1980, 0xD941, 0x1B00, 0xDBC1, 0xDA81, 0x1A40,
    0x1E00, 0xDEC1, 0xDF81, 0x1F40, 0xDD01, 0x1DC0, 0x1C80, 0xDC41,
    0x1400, 0xD4C1, 0xD581, 0x1540, 0xD701, 0x17C0, 0x1680, 0xD641,
    0xD201, 0x12C0, 0x1380, 0xD341, 0x1100, 0xD1C1, 0xD081, 0x1040,
    0xF001, 0x30C0, 0x3180, 0xF141, 0x3300, 0xF3C1, 0xF281, 0x3240,
    0x3600, 0xF6C1, 0xF781, 0x3740, 0xF501, 0x35C0, 0x3480, 0xF441,
    0x3C00, 0xFCC1, 0xFD81, 0x3D40, 0xFF01, 0x3FC0, 0x3E80, 0xFE41,
    0xFA01, 0x3AC0, 0x3B80, 0xFB41, 0x3900, 0xF9C1, 0xF881, 0x3840,
    0x2800, 0xE8C1, 0xE981, 0x2940, 0xEB01, 0x2BC0, 0x2A80, 0xEA41,
    0xEE01, 0x2EC0, 0x2F80, 0xEF41, 0x2D00, 0xEDC1, 0xEC81, 0x2C40,
    0xE401, 0x24C0, 0x2580, 0xE541, 0x2700, 0xE7C1, 0xE681, 0x2640,
    0x2200, 0xE2C1, 0xE381, 0x2340, 0xE101, 0x21C0, 0x2080, 0xE041,
    0xA001, 0x60C0, 0x6180, 0xA141, 0x6300, 0xA3C1, 0xA281, 0x6240,
    0x6600, 0xA6C1, 0xA781, 0x6740, 0xA501, 0x65C0, 0x6480, 0xA441,
    0x6C00, 0xACC1, 0xAD81, 0x6D40, 0xAF01, 0x6FC0, 0x6E80, 0xAE41,
    0xAA01, 0x6AC0, 0x6B80, 0xAB41, 0x6900, 0xA9C1, 0xA881, 0x6840,
    0x7800, 0xB8C1, 0xB981, 0x7940, 0xBB01, 0x7BC0, 0x7A80, 0xBA41,
    0xBE01, 0x7EC0, 0x7F80, 0xBF41, 0x7D00, 0xBDC1, 0xBC81, 0x7C40,
    0xB401, 0x74C0, 0x7580, 0xB541, 0x7700, 0xB7C1, 0xB681, 0x7640,
    0x7200, 0xB2C1, 0xB381, 0x7340, 0xB101, 0x71C0, 0x7080, 0xB041,
    0x5000, 0x90C1, 0x9181, 0x5140, 0x9301, 0x53C0, 0x5280, 0x9241,
    0x9601, 0x56C0, 0x5780, 0x9741, 0x5500, 0x95C1, 0x9481, 0x5440,
    0x9C01, 0x5CC0, 0x5D80, 0x9D41, 0x5F00, 0x9FC1, 0x9E81, 0x5E40,
    0x5A00, 0x9AC1, 0x9B81, 0x5B40, 0x9901, 0x59C0, 0x5880, 0x9841,
    0x8801, 0x48C0, 0x4980, 0x8941, 0x4B00, 0x8BC1, 0x8A81, 0x4A40,
    0x4E00, 0x8EC1, 0x8F81, 0x4F40, 0x8D01, 0x4DC0, 0x4C80, 0x8C41,
    0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
    0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040};

void baseTool::Crc16(const uint8_t* pDataIn, int iLenIn, uint16_t* pCRCOut)
{
    uint16_t wResult = 0;
    uint16_t wTableNo = 0;
    int i = 0;
    for( i = 0; i < iLenIn; i++)
    {
        wTableNo = ((wResult & 0xff) ^ (pDataIn[i] & 0xff));
        wResult = ((wResult >> 8) & 0xff) ^ wCRC16Table[wTableNo];
    }

    *pCRCOut = wResult;
}

std::string baseTool::Crc16String(const uint8_t* pDataIn, int iLenIn)
{
    uint16_t wResult = 0;
    uint16_t wTableNo = 0;
    int i = 0;
    for( i = 0; i < iLenIn; i++)
    {
        wTableNo = ((wResult & 0xff) ^ (pDataIn[i] & 0xff));
        wResult = ((wResult >> 8) & 0xff) ^ wCRC16Table[wTableNo];
    }

    return std::to_string(wResult);
}

std::string baseTool::formatingDate(std::string date,unsigned int index)
{
    if (date == "无数据") {
        return std::string("");
    }

    if (date.length() < 8) {
        return std::string("");
    }

    unsigned int count = 0;
    char tmp1[16] = { 0 };
    for (unsigned int i = 0; i < date.length(); i++) {
        if ((date[i] >= '0') && (date[i] <= '9')) {

            tmp1[count] = date[i];
            count++;
            if( index == 0 && count == 8)
            {
                break;
            }
            if( index == 1 && count == 15)
            {
                break;
            }
            else if(index == 1 && count == 8)
            {
                tmp1[count] = '_';
                count++;
            }
        }
    }

    if (count == 8 || count == 15) {
        return std::string(tmp1);
    } else {
        return std::string("");
    }
}

memberItem *baseTool::getMemberItemByName(std::vector<memberItem> *pMemberList,std::string name)
{
    if(pMemberList != NULL)
    {
        for (unsigned int i = 0; i < pMemberList->size(); i++) {
            if((*pMemberList)[i].name == name)
            {
                return &(*pMemberList)[i];
            }
        }
    }
    return NULL;
}

bool baseTool::checkMemberItemAndSetAllUnOutput(std::vector<memberItem> *pMemberList,memberItem *pMemberItem,bool isMust)
{
    if(pMemberItem && pMemberList)
    {
        if(!pMemberItem->value->result && (pMemberItem->config.isOpen || isMust) )
        {
            for(unsigned int i =0; i< pMemberList->size(); i++)
            {
                (*pMemberList)[i].output = false;
            }
            pMemberItem->output = true;
            pMemberItem->config.isOpen = true ;
            return true;
        }
    }
    return false;
}

std::string baseTool::getObjectItemValueByName(std::vector<objectMember *> *paramList, std::string name)
{
    for (unsigned int i = 0; i < paramList->size(); i++) {
        if((*paramList)[i]->codeName == name)
        {
            return *(*paramList)[i]->value;
        }
    }
    return "";
}

/*
 * desc      : 获得当前时间的时间戳
 * return    : 返回当前时间的时间戳，单位秒
 */
time_t baseTool::getTimeStamp() {
    std::chrono::time_point<std::chrono::system_clock,std::chrono::milliseconds> tp = std::chrono::time_point_cast<std::chrono::milliseconds>(std::chrono::system_clock::now());
    auto tmp = std::chrono::duration_cast<std::chrono::seconds>(tp.time_since_epoch());
    std::time_t timestamp = tmp.count();

    return timestamp;
}

/*
 * desc      : 把输入的时间转换成时间戳的形式，时间戳单位为秒
 * time      : 需要转换成时间戳的时间
 * format    : 输入的time格式
 * return    : 返回输入参数的时间戳
 */
time_t baseTool::strTime2unix(const std::string& time, const std::string& format) {
    struct tm tm{};
    memset(&tm, 0, sizeof(tm));

    int count = sscanf(time.c_str(), format.c_str(),
                       &tm.tm_year, &tm.tm_mon, &tm.tm_mday,
                       &tm.tm_hour, &tm.tm_min, &tm.tm_sec);

    if (count != 6)    return (time_t)0;

    tm.tm_year -= 1900;
    tm.tm_mon--;

    return mktime(&tm);
}

std::string baseTool::getObjectItemValueByName(std::vector<objectMember> *paramList, std::string name)
{
    for (unsigned int i = 0; i < paramList->size(); i++) {
        if((*paramList)[i].codeName == name)
        {
            return *(*paramList)[i].value;
        }
    }
    return "";
}

objectMember *baseTool::getObjectItemByName(std::vector<objectMember> *paramList, std::string name)
{
    for (unsigned int i = 0; i < paramList->size(); i++) {
        if((*paramList)[i].codeName == name)
        {
            return &(*paramList)[i];
        }
    }
    return NULL;
}

objectMember *baseTool::getObjectItemByName(std::vector<objectMember*> *paramList, std::string name)
{
    for (unsigned int i = 0; i < paramList->size(); i++) {
        if((*paramList)[i]->codeName == name)
        {
            return (*paramList)[i];
        }
    }
    return NULL;
}

bool baseTool::checkIsNewCar(std::vector<objectMember *> *paramList)
{
    std::string jylb = baseTool::getObjectItemValueByName(paramList,"jianYanLeiBie");
    if(jylb == "00")
    {
        return true;
    }
    return false;
}

bool baseTool::checkCllxIsK3xOrK4x(std::vector<objectMember *> *paramList)
{
    std::string cllx = baseTool::getObjectItemValueByName(paramList,"cheLiangLeiXing");
    if((cllx.substr(0, 2)=="K3") || (cllx.substr(0, 2)=="K4"))
    {
        return true;
    }
    return false;
}
bool baseTool::checkCllxIsMx(std::vector<objectMember *> *paramList)
{
    std::string cllx = baseTool::getObjectItemValueByName(paramList,"cheLiangLeiXing");
    if(cllx.substr(0, 1)=="M")  
    {
        return true;
    }
    return false;
}
bool baseTool::checkHaopaiIsXinNenYuan(string str_haopai)
{
    /*
     * 51   大型新能源汽车
       52   小型新能源汽车
    */
    bool flag = false ;
    if( str_haopai == "51"  || str_haopai == "52" ){
        flag = true ;
    }
    return flag ;
}
bool baseTool::checkRlzlIsXinNengYuan(string ranliao)
{
    /*
     A		汽油
     B		柴油
     C		电（以电能驱动的汽车）
     D		混合油
     E		天然气
     F		液化石油气
     L		甲醇
     M		乙醇
     N		太阳能
     O		混合动力
     Y		无（仅限全挂车等无动力的）
     Z		其他
    */
   if (ranliao.length() != 1  ){
        std::cerr<<"燃料类型:"<<ranliao<<"长度错误！"<<endl;
        return false ;
    }
    char c_ranliao = ranliao[0];
    bool result = false ;
    switch (c_ranliao) {
    case 'C':
    case 'E':
    case 'L':
    case 'M':
    case 'N':
    {
        result = true ;
        break;
    }
    case 'A':
    case 'B':
    case 'D':
    case 'F':
    case 'O':
    case 'Y':
    case 'Z':
    {
        result = true ;
        break;
    }
    default:
    {
        std::cerr<<"燃料类型: "<<ranliao<< " 未知！"<<endl;
        break;
    }
    }
    return result ;

}


std::string baseTool::getDangTianRiQi()
{
    std::string nowTime;
    std::time_t t = std::time(NULL);
    std::tm *st = std::localtime(&t);
    char tmpArray[64] = { 0 };
    sprintf(tmpArray, "%d-%02d-%02d", st->tm_year + 1900, st->tm_mon + 1, st->tm_mday);

    nowTime = tmpArray;

    return nowTime;
}

std::string baseTool::getDangTianRiQi(int time_count)
{
    time_t timeinfo = time(nullptr);

    timeinfo += (time_count*86400);

    tm* t_tm = localtime(&timeinfo);

    char current_time[256];
    sprintf(current_time,"%d-%02d-%02d",t_tm->tm_year+1900,t_tm->tm_mon+1,t_tm->tm_mday);

    return  static_cast<std::string>(current_time);
}

std::string baseTool::getCurTime()
{
    std::string nowTime;
    std::time_t t = std::time(NULL);
    std::tm *st = std::localtime(&t);
    char tmpArray[64] = { 0 };
    sprintf(tmpArray, "%04d-%02d-%02d %02d:%02d:%02d", st->tm_year+1900,st->tm_mon + 1, st->tm_mday, st->tm_hour, st->tm_min, st->tm_sec);

    nowTime = tmpArray;

    return nowTime;
}

bool baseTool::isTenYears(std::string cuCiDengJiRiQi)
{
    return isOverSomeYears(cuCiDengJiRiQi,10);
}

bool baseTool::isOverSomeYears(std::string cuCiDengJiRiQi,int numYear)
{
    std::string djrq = baseTool::formatingDate(cuCiDengJiRiQi);
    if (djrq == "") {	/* 未能获取“初次登记日期” */
        return false;
    }
    //printf("cuCiDengJiRiQi:%s\n",cuCiDengJiRiQi.c_str());
    int djrq_year = std::stoi(djrq.substr(0, 4));
    int djrq_month = std::stoi(djrq.substr(4, 2));
    int djrq_day = std::stoi(djrq.substr(6, 2));

    std::time_t t = std::time(NULL);
    std::tm *st = std::localtime(&t);

    /* 先判断年，年相同的情况下，判断月；月相同的情况下，判断日 */
    if ((st->tm_year + 1900 - djrq_year) > numYear) {
        return true;
    } else if ((st->tm_mon + 1 - djrq_year) < numYear) {
        return false;
    } else if ((st->tm_year + 1900 - djrq_year) == numYear) {
        if ((st->tm_mon + 1- djrq_month) > 0) {
            return true;
        } else if ((st->tm_mon + 1- djrq_month) < 0) {
            return false;
        } else if ((st->tm_mon + 1 - djrq_month) == 0) {
            if ((st->tm_mday - djrq_day) > 0) {
                return true;
            } else if ((st->tm_mday- djrq_day) < 0) {
                return false;
            } else if ((st->tm_mday - djrq_day) == 0) {
                return true;	/* 当天刚好numYear年也算numYear年以上车型 */
            }
        }
    }
    return false;
}

/*
 * desc    ： 判断输入参数是否为数字
 * str     : 需要判断的字符串
 * return  ：是数字返回true，否则返回false
 */
bool baseTool::isNum(const std::string& str) {
     std::stringstream sin(str);
     double d;
     char c;
     if(!(sin >> d))     return false;
     if (sin >> c)       return false;

     return true;
}

/*
 * desc    : 转换 2020年5月20日-->2020-05-20
 * srcdate : 输出参数需要格式化的日期
 * desDate : 格式化后需要输出的日期
 * return  : 格式错误的返回false，正确返回true
*/
bool baseTool::convertDateFormat(const std::string& srcDate, std::string& desDate) {
    int yearPos = srcDate.find("年");
    int monthPos = srcDate.find("月");
    int dayPos = srcDate.find("日");
	if (-1 == yearPos || -1 == monthPos || -1 == dayPos
		|| 0 == yearPos || 4 < yearPos
		|| 3 >= (monthPos - yearPos) || 5 < (monthPos - yearPos)
		|| 3 >= (dayPos - monthPos) || 5 < (dayPos - monthPos)) {
		return false;
	}

	std::string year = srcDate.substr(0, yearPos);
	std::string month = srcDate.substr(yearPos + 3, monthPos - yearPos - 3);
	std::string day = srcDate.substr(monthPos + 3, dayPos - monthPos - 3);
	if (!(isNum(year) && isNum(month) && isNum(day)))   return false;

    char buf[64];
    sprintf(buf, "%04d-%02d-%02d", stoi(year), stoi(month), stoi(day));
    desDate = std::string(buf);

    return true;
} 

//针对2020-04-10 这样的日期
bool baseTool::checkDateIsExpired(std::string date, std::string startDate, std::string endDate)
{
    int diffStart = 0, diffEnd = 0;
    int date_year = std::stoi(date.substr(0, 4));
    int date_month = std::stoi(date.substr(5, 2));
    int date_day = std::stoi(date.substr(8, 2));

    int startDate_year = std::stoi(startDate.substr(0, 4));
    int startDate_month = std::stoi(startDate.substr(5, 2));
    int startDate_day = std::stoi(startDate.substr(8, 2));

    int endDate_year = std::stoi(endDate.substr(0, 4));
    int endDate_month = std::stoi(endDate.substr(5, 2));
    int endDate_day = std::stoi(endDate.substr(8, 2));

    diffStart = (date_year - startDate_year) * 12 + date_month - startDate_month;
    diffEnd = (endDate_year - date_year) * 12 + endDate_month - date_month;

    if (diffStart > 0 && diffEnd > 0)
        return true;
    else if (diffStart == 0 && diffEnd > 0)
    {
       if ((date_day - startDate_day) >= 0)
           return true;
    }
    else if (diffStart > 0 && diffEnd == 0)
    {
        if ((endDate_day - date_day) >= 0)
            return true;
    }
    else if (diffStart == 0 && diffEnd == 0)
    {
        if ((date_day - startDate_day) >= 0 && (endDate_day - date_day) >= 0)
            return true;
    }

    return false;
}

void  baseTool::changeCheckAlgBaseParamElementByName(std::vector<memberItem> *pResultMemberList, std::string name, std::string desc, bool output)
{
    if(pResultMemberList != NULL)
    {
        for(unsigned int i =0; i< pResultMemberList->size(); i++)
        {
            if(name == (*pResultMemberList)[i].name)
            {
                 (*pResultMemberList)[i].output = output;
                 if(!desc.empty())
                 {
                     (*pResultMemberList)[i].desc = desc;
                 }
            }
        }
    }
}

/*
    判定手机号合法依据：

    1. 手机号前3位是移动、联通、电信已开放的号段

    2. 手机号必须是11位数字

*/

int baseTool::isMobileNumber(std::string number)
{
    if (number.length() == 0) {
        return -1;
    }

    if (number.length() == 8) {
        return 1;   /* 8位直接按固定电话处理，不做其他判定 */
    }

    if (number.length() != 11) {
        return 0;
    }

    for (unsigned int i = 0; i < number.length(); i++) {
        if ((number[i] < '0') || (number[i] > '9')) {
            return 0;
        }
    }

    /*
        以下手机号段取自百度百科“手机号码”（更新时间：2017-09-13）
    */
    std::vector<std::string> YiDong = { "134", "135", "136", "137", "138", "139", "147", "150",
                                        "151", "152", "157", "158", "159", "178", "182", "183", "184", "187", "188", "198" };
    std::vector<std::string> LianTong = { "130", "131", "132", "155", "156", "145", "175", "176", "185", "186", "166" };
    std::vector<std::string> DianXin = { "133", "149", "153", "173", "177", "180", "181", "189", "199" };

    unsigned int i;
    for (i = 0; i < YiDong.size(); i++) {
        if (number.find(YiDong[i]) != std::string::npos) {
            break;
        }
    }

    if (i < YiDong.size()) {
        return 1;
    }

    for (i = 0; i < LianTong.size(); i++) {
        if (number.find(LianTong[i]) != std::string::npos) {
            break;
        }
    }

    if (i < LianTong.size()) {
        return 1;
    }

    for (i = 0; i < DianXin.size(); i++) {
        if (number.find(DianXin[i]) != std::string::npos) {
            break;
        }
    }

    if (i < DianXin.size()) {
        return 1;
    }

    return 0;
}

void baseTool::setAllPass(std::vector<memberItem> *pMemberList)
{
    if(pMemberList != NULL)
    {
    	for(unsigned int i =0; i< pMemberList->size(); i++)
    	{
        	(*pMemberList)[i].value->result = true;
    	}
    }   
}

void baseTool::openMemberItemWriteResultByName(std::vector<memberItem> *pMemberList,std::string name)
{
    if(pMemberList != NULL)
    {
	    for (unsigned int i = 0; i < pMemberList->size(); i++) {
    	    if((*pMemberList)[i].name == name)
        	{
            	(*pMemberList)[i].output = true;
        	}
    	}
	}
}

bool baseTool::compareDate(std::string kssj, std::string PictureDate)
{
    if (kssj == "无数据") {
        return true;
    }

    if ((kssj.length() < 8) || (PictureDate.length() < 8)) {
        return true;
    }

    /* 取出"开始时间"有效日期字段 */
    unsigned int count = 0;
    char tmp1[8] = { 0 };
    for (unsigned int i = 0; i < kssj.length(); i++) {
        if ((kssj[i] >= '0') && (kssj[i] <= '9')) {
            tmp1[count] = kssj[i];
            count++;

            if (count == 8) {
                break;
            }
        }
    }

    /* 未能获取完整日期信息 */
    if (count != 8) {
        return true;
    }

    /* 取出"照片日期"有效日期字段 */
    count = 0;
    char tmp2[8] = { 0 };
    for (unsigned int i = 0; i < PictureDate.length(); i++) {
        if ((PictureDate[i] >= '0') && (PictureDate[i] <= '9')) {
            tmp2[count] = PictureDate[i];
            count++;

            if (count == 8) {
                break;
            }
        }
    }

    /* 未能获取完整日期信息 */
    if (count != 8) {
        return true;
    }

    for (unsigned int i = 0; i < 8; i++) {
        if (tmp1[i] != tmp2[i]) {
            return false;
        }
    }

    return true;
}

std::string baseTool::formatFileNameLunTai(std::string name)
{
    std::string name_buf = name;
    try {
        for (unsigned int i = 0; i < name.size(); i++) {
            if (name_buf[i] == ',' || name_buf[i] == ' ' || name_buf[i] == ';') {
                name_buf.erase(i);
                break;
            }
        }
    } catch (const std::exception &e) {
        std::cout << "formatFileNameLunTai Error: " << e.what() << std::endl;
        return "";
    }

    return name_buf;
}

std::string baseTool::formatFileName(std::string name)
{
    try {
        for (unsigned int i = 0; i < name.size(); i++) {
            if (name[i] == '/') {
                name.replace(i, 1, 1, '=');
            }else if( name[i] == ' ' ){
                name.erase(i);
            }
        }
    } catch (const std::exception &e) {
        std::cout << "formatFileName Error: " << e.what() << std::endl;
        return "";
    }

    return name;
}

std::string baseTool::formatPhotoFileName(std::string name)
{
    try {
        for (unsigned int i = 0; i < name.size(); i++) {
            if (name[i] == '/') {
                name.replace(i, 1, 1, '=');
            }else if(name[i] == ',' || name[i] == ' ' || name[i] == ';'){
                name.erase(i);
            }
        }
    } catch (const std::exception &e) {
        std::cout << "formatFileName Error: " << e.what() << std::endl;
        return "";
    }

    return name;
}

std::string baseTool::getDestClpp(std::string srcClpp)
{
    if(srcClpp.find("牌")!=std::string::npos)
    {
        srcClpp = srcClpp.substr(0,srcClpp.size()-strlen("牌"));
    }

    for (unsigned int i = 0; i < cheBiaoVector.size(); i++) {
        if(srcClpp == cheBiaoVector[i].src)
        {
            return cheBiaoVector[i].dest;
        }
    }

    std::string lastCheBiao;
    std::vector<cheBiaoItem> destVector = {};
    std::vector<cheBiaoItem> destVector2 = {};

    for (unsigned int i = 0; i < cheBiaoVector.size(); i++) {
        if(lastCheBiao != cheBiaoVector[i].dest)
        {
            if(strstr(srcClpp.c_str(),cheBiaoVector[i].dest.c_str()) != NULL)
            {
                return cheBiaoVector[i].dest;
            }

            if(srcClpp.size() < cheBiaoVector[i].dest.size())
            {
                if(strstr(cheBiaoVector[i].dest.c_str(),srcClpp.c_str()) != NULL)
                {
                    return cheBiaoVector[i].dest;
                }
            }

            lastCheBiao = cheBiaoVector[i].dest;
        }

        if(strstr(srcClpp.c_str(),cheBiaoVector[i].src.c_str()) != NULL)
        {
            destVector.push_back(cheBiaoVector[i]);
        }

        if(srcClpp.size() < cheBiaoVector[i].src.size())
        {
            if(strstr(cheBiaoVector[i].src.c_str(),srcClpp.c_str()) != NULL)
            {
                destVector2.push_back(cheBiaoVector[i]);
            }
        }
    }

    if(destVector.size() == 1)
    {
        return destVector[0].dest;
    }else if(destVector.size() > 1){
        bool haveNotMatchDest = false;
        std::string likeDest = destVector[0].dest;

        for (unsigned int i = 0; i < destVector.size(); i++) {
            if(likeDest!=destVector[i].dest)
                haveNotMatchDest = true;
        }

        if(!haveNotMatchDest)
        {
            return likeDest;
        }
    }

    if(destVector2.size() == 1)
    {
        return destVector2[0].dest;
    }else if(destVector2.size() > 1){
        bool haveNotMatchDest = false;
        std::string likeDest = destVector2[0].dest;

        for (unsigned int i = 0; i < destVector2.size(); i++) {
            if(likeDest!=destVector2[i].dest)
                haveNotMatchDest = true;
        }

        if(!haveNotMatchDest)
        {
            return likeDest;
        }
    }

    //printf("zzcmc:%s srcClpp:%s\n",zzcmc.c_str(),srcClpp.c_str());

    return srcClpp;
}
bool  baseTool::compareClpp(std::string srcClpp,std::string dstClpp)
{
   return  checkIsPass(srcClpp,dstClpp);
}
void baseTool::closeMemberItemWriteResultByName(std::vector<memberItem> *pMemberList,std::string name)
{
    if(pMemberList != NULL)
    {
    	for (unsigned int i = 0; i < pMemberList->size(); i++) {
            if( name.size() == 0 || (*pMemberList)[i].name == name) {
            	(*pMemberList)[i].output = false;
            }
        }
    }
}

std::string baseTool::getAlgItemCodeByPicType(PicType type, std::vector<algItem> *pAlgItemVector)
{
    for(unsigned int i = 0; i < pAlgItemVector->size(); i++)
    {
        if((*pAlgItemVector)[i].type == type)
        {
            return (*pAlgItemVector)[i].code;
        }
    }
    return "";
}

std::string baseTool::getAlgItemCodeByPicType(PicType type, void *p)
{
    std::vector<algItem> *pAlgItemVector = static_cast<std::vector<algItem> *>(p);
    for(unsigned int i = 0; i < pAlgItemVector->size(); i++)
    {
        if((*pAlgItemVector)[i].type == type)
        {
            return (*pAlgItemVector)[i].code;
        }
    }
    return "";
}

std::string baseTool::getAlgItemNameByPicType(PicType type, std::vector<algItem> *pAlgItemVector)
{
    for(unsigned int i = 0; i < pAlgItemVector->size(); i++)
    {
        if((*pAlgItemVector)[i].type == type)
        {
            return (*pAlgItemVector)[i].name;
        }
    }
    return "";
}

_c_algTask *baseTool::seachPhotoByZpType(std::vector<_c_algTask *> *pAlgTaskVector, std::string zpType)
{
    for(unsigned int i = 0; i < pAlgTaskVector->size(); i++)
    {
//        if((*pAlgTaskVector)[i]->algCode == algCode && (*pPhotoList)[i].localPath != "TBD")
        if((*pAlgTaskVector)[i]->algCode == zpType)
        {
             return (*pAlgTaskVector)[i];
        }
    }
    return NULL;
}

bool baseTool::photoIsExist(std::vector<_c_algTask *> *pAlgTaskVector, std::string algCode)
{
    for(unsigned int i = 0; i < pAlgTaskVector->size(); i++)
    {
        if((*pAlgTaskVector)[i]->algCode == algCode)
        {
             return true;
        }
    }
    return false;
}

bool baseTool::wirteResultByMemberList(std::string algName, _c_algTask *algTask, std::vector<memberItem> *pMemberList)
{
    bool isPass = true;
    E_JG errjg = PASS;
    std::string errsm;
    std::string subErrsm;

    if(pMemberList != NULL)
    {
        //遍历参数类基类中结果成员别表
        for (unsigned int i = 0; i < pMemberList->size(); i++) {
            //判断成员的配置打开且需要输出
            if((*pMemberList)[i].config.isOpen&&(*pMemberList)[i].output)
            {
                //如果该输出项为false 将isPass设置为false 并记录错误原因
                if(!(*pMemberList)[i].value->result)
                {
                    isPass = false;
//                     printf("3name:%s isPass:%d\n",(*pHandle->pResultMemberList)[i].desc.c_str(),isPass);
                    //如果结果的错误严重等级更大则使用严重等级大的错误类型来当做判断结果
                    if(errjg < (*pMemberList)[i].config.errLevel)
                        errjg = (*pMemberList)[i].config.errLevel;

                    errsm +="[" + (*pMemberList)[i].desc /* + ERROR_STR*/ + "] ";
                }
            }
        }
        //如果isPass为true则填充通过，否则填充错误类型和错误说明
        if(isPass)
        {
            baseTool::writeResultByJGAndSM(algTask,PASS, "[通过]");
            return true;
        }
        else
        {
            baseTool::writeResultByJGAndSM(algTask,errjg, algName+":"+errsm);
        }
    }
//    pPhoto->checkOver = true;
    return false;
}

void baseTool::writeResultByJGAndSM(_c_algTask *algTask, E_JG jg, std::string sm)
{
    if(algTask != NULL)
    {
        algTask->setAlgTaskResult(jg,sm);
    }
}

bool baseTool::checkDateChange(int &day)
{
    std::time_t t = std::time(NULL);
    std::tm *st = std::localtime(&t);

    if (st->tm_mday == day)//[1-31]
        return false;
    else
    {
        day = st->tm_mday;
        return true;
    }
}

std::string baseTool::getNowDate()
{
    time_t t;
    char buf[64];

    /* 获取时间 */
    time(&t);
    strftime(buf, sizeof(buf), "%F %T", localtime(&t));
    return buf;
}

char _key[10] = {5,8,6,1,8,6,3,4,2};
std::string baseTool::setPassWord(std::string passWord)
{
    char pwd[1024] = {0};
    char outPwd[1024] = {0};

    sprintf(pwd,"%s",passWord.c_str());
    unsigned int pwdLen = strlen(pwd);

    for (unsigned int i = 0; i < pwdLen; i++) {
        char subKey = _key[i%10];

        if(128 - pwd[i] > subKey)
        {
            outPwd[i] = pwd[i] + subKey;
        }
        else
        {
            outPwd[i] = subKey;
        }
    }
    return outPwd;
}

std::string baseTool::getDBPassWord(std::string passWord)
{
    char pwd[1024] = {0};
    char outPwd[1024] = {0};

    sprintf(pwd,"%s",passWord.c_str());
    unsigned int pwdLen = strlen(pwd);

    for (unsigned int i = 0; i < pwdLen; i++) {
        char subKey = _key[i%10];

        if(subKey + pwd[i] <= 128)
        {
            outPwd[i] = pwd[i] - subKey;
        }
        else
        {
            outPwd[i] = pwd[i];
        }
    }
    return outPwd;
}

std::string baseTool::getDangTianShiJian()
{
    std::string nowTime;
    std::time_t t = std::time(NULL);
    std::tm *st = std::localtime(&t);
    char tmpArray[64] = { 0 };
    sprintf(tmpArray, "%d%02d%02d%02d%02d%02d", st->tm_year + 1900, st->tm_mon + 1, st->tm_mday,st->tm_hour,st->tm_min,st->tm_sec);

    nowTime = tmpArray;

    return nowTime;
}

void baseTool::saveConfigByJson(std::string fileName,Json::Value root)
{
    std::ofstream ofs;
    ofs.open(fileName);
    ofs << root.toStyledString();
    ofs.close();
}

int baseTool::copyFile(std::string src, std::string des)
{
    printf("copyFile %s >> %s   ",src.c_str(),des.c_str());

    int nRet = 0;
    FILE* pSrc = NULL, *pDes = NULL;
    pSrc = fopen(src.c_str(), "r");
    pDes = fopen(des.c_str(), "w+");


    if (pSrc && pDes)
    {
        int nLen = 0;
        char szBuf[1024] = {0};
        while((nLen = fread(szBuf, 1, sizeof szBuf, pSrc)) > 0)
        {
            fwrite(szBuf, 1, nLen, pDes);
        }
        printf("\033[32m OK \033[0m\n");
    }
    else
    {
        nRet = -1;
        printf("\033[31m ERR\033[0m\n");
    }


    if (pSrc)
        fclose(pSrc), pSrc = NULL;

    if (pDes)
        fclose(pDes), pDes = NULL;

    return nRet;
}

int baseTool::copyFolder(std::string src, std::string des)
{
    struct dirent* ent = NULL;
    DIR *pDir;
    pDir=opendir(src.c_str());
    while (NULL != (ent=readdir(pDir)))
    {
        if( ent->d_name[0]!='.')
        {
            std::string fileName = ent->d_name;
            std::string srcPath = src+"/"+fileName;
            std::string desPath = des+"/"+fileName;
            if(ent->d_type == 4)
            {
                baseTool::CheckDir(desPath);
                baseTool::copyFolder(srcPath, desPath);
            }else if(ent->d_type == 8){
                baseTool::copyFile(srcPath, desPath);
            }else {
                printf("error type:%d name:%s \n",ent->d_type,ent->d_name);
            }
        }
    }
    closedir(pDir);
    return 1;
}

bool baseTool::isFolder(std::string src)
{
    bool isFolder = false;
    DIR *pDir = opendir(src.c_str());
    if(pDir!=NULL)
    {
        isFolder = true;
    }
    closedir(pDir);

    return isFolder;
}

std::string baseTool::getCurVersion()
{
    return VERSION;
}

std::string baseTool::getLocalIp()
{
    int                 sockfd;
    struct sockaddr_in  sin;
    struct ifreq        ifr;

    sockfd = socket(AF_INET, SOCK_DGRAM, 0);
    if (sockfd == -1) {
        perror("socket error");
        exit(1);
    }
    strncpy(ifr.ifr_name, "enp3s0", IFNAMSIZ);      //Interface name

    if (ioctl(sockfd, SIOCGIFADDR, &ifr) == 0) {    //SIOCGIFADDR 获取interface address
        memcpy(&sin, &ifr.ifr_addr, sizeof(ifr.ifr_addr));
        close(sockfd);
        return inet_ntoa(sin.sin_addr);
    }
    close(sockfd);
    return "0.0.0.0";
}

//根据《查验-业务类型 - 20200331.xlsx》 需要检验为true
bool baseTool::isNeedCheckChePaiHao(std::vector<objectMember *> *paramList)
{
    std::string ywlx = baseTool::getObjectItemValueByName(paramList,"yeWuLeiXing");
    std::string ywyy = baseTool::getObjectItemValueByName(paramList,"yeWuYuanYin");
    if (ywlx.empty() || ywlx == "无数据")
    {
        return true;
    }

    if(ywlx == "B")
    {
        if (ywyy == "A" || ywyy == "C")
            return true;
    }

    if(ywlx == "D")
    {
        if (ywyy == "J" || ywyy == "K" || ywyy == "L" || ywyy == "E"
            || ywyy == "D" || ywyy == "F" || ywyy == "G" || ywyy == "H" || ywyy == "I")
            return true;
    }

    if (ywlx == "G")
    {
        if (ywyy == "A")
            return true;
    }


    if (ywlx == "J")
    {
        if (ywyy == "A" || ywyy == "B")
            return true;
    }

    if (ywlx == "L")
    {
        if (ywyy == "C")
            return true;
    }

    if (ywlx == "V")
    {
        if (ywyy == "C" || ywyy == "D")
            return true;
    }

    if (ywlx == "Y")
    {
        if (ywyy == "A")
            return true;
    }

    return false;
}

void baseTool::split(const char* token, std::string &str, std::vector<std::string> &splitVector)
{
    std::regex reg(token);
    std::sregex_token_iterator begin(str.begin(), str.end(), reg ,-1), end;
    std::copy(begin, end, std::back_inserter(splitVector));
}

std::string baseTool::checkAlgItemLinkIsValid(std::string link, std::vector<algItem> *pAlgItemVector)
{
    if(link=="无")
        return "";

    //寻找;出现次数
    string token = ";";//模式
    int tokenCnt = 0;
    string::size_type begin = 0;
    while((begin = link.find(token, begin + 1)) != string::npos)
    {
        tokenCnt++;
        //printf("pos:%d cnt:%d\n", begin, tokenCnt);
        begin = begin + token.length();
    }

    //确认;应出现次数
    int targetCnt = 0;
    int num = link.size() / 7;

    if (num == 0)
    {
        if (tokenCnt == 0)
            return "(必须加上间隔符;)";
    }
    else
    {
        if (link.size() % (num * 7) != 0)
        {
            targetCnt = num + 1;
        }
        else
        {
            targetCnt = num;
        }
    }

    //判断是否有漏;
    if (tokenCnt < targetCnt)
    {
        return "(缺失;或者使用了中文;)";
    }

    //判断所有的algcode是否合法
    std::vector<std::string> splitVector;
    splitVector.clear();
    baseTool::split(";", link, splitVector);

    for (unsigned int i = 0; i < splitVector.size(); i++)
    {
        std::string itemStr = splitVector[i] ;
        if(itemStr.size() < 2 ){
            char buffer[64];
            sprintf(buffer, "不合法的算法id:[%s]", itemStr.c_str());
            return buffer ;
        }
        std::string code = splitVector[i].substr(2, splitVector[i].size() - 2);
        bool isOk = false;
        for(unsigned int j = 0; j < pAlgItemVector->size(); j++)
        {
            if(code == (*pAlgItemVector)[j].code)
            {
                isOk = true;
                break;
            }
        }

        if (!isOk)
        {
            char buffer[64];
            sprintf(buffer, "(%s 不存在 请确认!)", code.c_str());
            return buffer;
        }
    }

    return "";
}

E_JG baseTool::checkAlgItemLinkResult(std::string curItemResult, std::string curItem, std::vector<_c_algTask *> *pAlgTaskVector)
{
    std::string code = curItem.substr(2, curItem.size() - 2);
    _c_algTask *algTask = seachPhotoByZpType(pAlgTaskVector, code);
    if(algTask)
    {
        if (curItem[0] == 'q')
        {
            if (algTask->result == std::to_string(PASS) && curItemResult == std::to_string(PASS))
            {
                return PASS;
            }
            else if (algTask->result == std::to_string(NOT_PASS) || curItemResult == std::to_string(NOT_PASS))
            {
                return NOT_PASS;
            }
        }
        else if(curItem[0] == 'h')
        {
            if (algTask->result == std::to_string(NOT_PASS) && curItemResult == std::to_string(NOT_PASS))
            {
                return NOT_PASS;
            }
            else if (algTask->result == std::to_string(PASS) || curItemResult == std::to_string(PASS))
            {
                return PASS;
            }
        }
        else
        {
            printf("%s link format error!\n", __func__);
        }
    }else {
        if(curItem[0] == 'q')
        {
            return NOT_PASS;
        }
        else if(curItemResult == std::to_string(PASS))
        {
            return PASS;
        }else if(curItemResult == std::to_string(UNABLE_IDENTIFY))
        {
            return UNABLE_IDENTIFY;
        }else if(curItemResult == std::to_string(NOT_PASS))
        {
            return NOT_PASS;
        }
    }

    return UNABLE_IDENTIFY;
}

void baseTool::getFileList(std::string dirName, std::vector<std::string> &vec)
{
    struct dirent * filename;
    DIR * pDir;
    pDir = opendir(dirName.c_str());
    while( ( filename = readdir(pDir) ) != NULL )
    {
        if( strcmp( filename->d_name , "." ) == 0 || strcmp( filename->d_name , "..") == 0)
            continue;

        char wholePath[128] = {0};
        sprintf(wholePath, "%s/%s", dirName.c_str(), filename->d_name);
        printf("wholePath：%s\n", wholePath);

        std::string filePath = wholePath;
        vec.push_back(filePath);
    }

    closedir(pDir);
}

void baseTool::writeResultInExistAlg(std::vector<_c_algTask *> *pAlgTaskVector, E_JG jg, std::string reason, std::string algCode)
{
    _c_algTask *pAlgTask = NULL;
    for(unsigned int i = 0; i < pAlgTaskVector->size(); i++)
    {
//        if((*pAlgTaskVector)[i]->algCode == algCode && (*pPhotoList)[i].localPath != "TBD")
        if((*pAlgTaskVector)[i]->algCode == algCode)
        {
              pAlgTask = (*pAlgTaskVector)[i];
        }
    }

    if (pAlgTask != NULL)
    {
        pAlgTask->result = std::to_string(jg);
        pAlgTask->reason += " " + reason;
    }
}

std::string baseTool::getWangLuoJieKouReturnInfoBiaoShi(_c_object *obj)
{
    _c_dbTask *pDbTask = static_cast<_c_dbTask *>(obj);
    for (unsigned int i = 0; i < pDbTask->memberVector.size(); i++)
    {
        if (pDbTask->memberVector[i].soapName == "jieKouBiaoShi")
        {
            return *pDbTask->memberVector[i].value;
        }
    }
    return "0";
}

bool baseTool::checkWangLuoJieKouReturnInfoIsValid(_c_object *obj)
{
    _c_dbTask *pDbTask = static_cast<_c_dbTask *>(obj);
    for (unsigned int i = 0; i < pDbTask->memberVector.size(); i++)
    {
        if (pDbTask->memberVector[i].soapName == "dataIsValid")
        {
            if (*pDbTask->memberVector[i].value == "false")
                return false;
            else if (*pDbTask->memberVector[i].value == "true")
                return true;
        }
    }
    return false;
}

_c_video *baseTool::getVideoObject(_c_algTask *pTask)
{
    _c_video *pVideo = NULL;
    if (pTask->pVideoCheckInfo != NULL)
    {
        for (unsigned int i = 0; i < pTask->pVideoCheckInfo->shiPinClassVector.size(); i++)
        {
            if(pTask->pClass != NULL)
            {
    //            printf("target type:%d current type:%d\n", pTask->pClass->mainPhotoType, (*pTask->pShiPinClassVector)[i]->videoAlgType);
                if (pTask->pClass->mainPhotoType == pTask->pVideoCheckInfo->shiPinClassVector[i]->videoAlgType - evideo)
                {
                    pVideo = pTask->pVideoCheckInfo->shiPinClassVector[i];
                    break;
                }
            }
        }
    }

    return pVideo;
}

std::string baseTool::Getfilepath(const char *path, const char *filename)
{
    return formatingPath(path)+filename;
}
std::string baseTool::formatingPath(const char *path)
{
    string rootdir = path;
    if(rootdir.size() > 0 && rootdir.at(rootdir.size() -1 ) != '/' ) rootdir+="/";
    return rootdir;
}

bool baseTool::keepRecentSomeDaysDir(const char* path,int val,int days)
{
    DIR *dir;
    struct dirent *dirinfo;
    struct stat statbuf;
    lstat(path, &statbuf);
    int is_del = !val ;

    if (S_ISREG(statbuf.st_mode))//判断是否是常规文件
    {
        remove(path);
        std::cout<<"删除文件:"<<path<<std::endl;
    }
    else if (S_ISDIR(statbuf.st_mode))//判断是否是目录
    {
        if ((dir = opendir(path)) == NULL)
            return 1;

        while ((dirinfo = readdir(dir)) != NULL)
        {
            if (strcmp(dirinfo->d_name, ".") == 0 || strcmp(dirinfo->d_name, "..") == 0)//判断是否是特殊目录
            continue;
            string dirname =   dirinfo->d_name ;

            std::string  filepath = Getfilepath(path, dirinfo->d_name);
            lstat(filepath.c_str(), &statbuf);
            bool isdir = S_ISDIR(statbuf.st_mode) ;

            if(isdir)
            {
                string olddir=getDangTianRiQi(-1*days);
                if ( olddir > dirname)
                {
                    is_del = 1 ;
                    keepRecentSomeDaysDir(filepath.c_str() , 0 ,days);

                }else{
                    is_del = 0 ;
                }
            }
            if(is_del)
            {
                std::cout<<"删除#" <<std::endl ;
                if(isdir)
                    rmdir(filepath.c_str());
                else
                    remove(filepath.c_str());
            }
            std::cout<< "path:" <<  filepath <<"  dirname:"<<dirname <<" IS_DIR:"<< S_ISDIR(statbuf.st_mode) <<std::endl;
        }
        closedir(dir);
    }
    return 0;
}

std::string baseTool::getMD5String(const string &str)
{
    MD5 md5(str);
    return md5.toString();
}

std::string baseTool::fun_write_new_file(const std::string& dir_path, const std::string& file_name, unsigned char *file_binary, int len)
{
	// 创建当前日期的目录
	std::string photo_dir{dir_path};
	std::time_t t = std::time(NULL);
	std::tm *st = std::localtime(&t);
	char tmpArray[128]{0};
	sprintf(tmpArray, "%d-%02d-%02d", st->tm_year + 1900, st->tm_mon + 1, st->tm_mday);
	std::string strCurTime = tmpArray;
	photo_dir += strCurTime;
	
	printf("photo dir is %s\n", photo_dir.c_str());
	
	struct stat st_buf{};
	stat(photo_dir.c_str(), &st_buf);
	if (!hl::pathexist(photo_dir)) {
		hl::creatdir(photo_dir);
		mkdir(photo_dir.c_str(), 0777);
	}
	photo_dir += "/";
	
	std::string open_file = photo_dir;
	open_file.append(file_name);
	FILE *pf = fopen(open_file.c_str(), "wb");
	if (nullptr == pf) {
		printf("open file failed, file name is %s\n", file_name.c_str());
		
		return "";
	}
	
	printf("opened file name is %s\n", open_file.c_str());
	fwrite(file_binary, 1, len, pf);
	
	fclose(pf);
	return open_file;
}

/*
 * desc      : 需要处理的字符串
 * x         : 需要被处理掉的字符
 * return    : 处理后的字符串
 */
std::string baseTool::deleteMarks(string des, char x) {
	des.erase(remove(des.begin(), des.end(), x), des.end());

	return des;
}

/*
 * desc      : 核对license有效性
 * result    : 输出参数，输出核对license对应的结果
 * beginDate : 输出参数，输出当前license的有效期的开始日期
 * endDate   ：输出参数，输出当前license的有效期的结束日期
 * return    : license校验结果，true成功，false失败
 */
bool baseTool::checkLicense(string &result, string & beginDate, string & endDate) {
    int res =0;
    res = check_licence("/opt/vehicle/program/CheJianConfig/lic.lic", beginDate, endDate);

	switch (res) {
		case 0:
			result = "lic文件uuid比对成功";

			break;
		case 1:
			result = "显卡驱动等出错或未安装显卡";

			break;
		case 2:
			result = "查询显卡数量失败";

			break;
		case 3:
			result = "没有找到显卡设备";

			break;
		case 4:
			result = "获取到显卡uuid失败";

			break;
		case 5:
			result = "未找到lic文件";

			break;
		case 6:
			result = "lic文件读取失败";

			break;
		case 7:
		case 8:
		case 9:
		case 10:
		case 11:
		case 12:
			result = "lic文件已过期";

			break;
		case 13:
			result = "lic文件uuid比对失败";

			break;
		default:
			result = "未定义的";
	}

	printf("check license return value is %d, message is %s \n", res, result.c_str());
	printf("license file begin date is %s, end date is %s \n", beginDate.c_str(), endDate.c_str());

	return res == 0;
}