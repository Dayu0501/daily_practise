/* soapTmriOutAccessSoapBindingProxy.cpp
   Generated by gSOAP 2.8.44 for TmriOutAccess.h

gSOAP XML Web services tools
Copyright (C) 2000-2017, Robert van Engelen, Genivia Inc. All Rights Reserved.
The soapcpp2 tool and its generated software are released under the GPL.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

#include "soapTmriOutAccessSoapBindingProxy.h"
//#include "check_item.h"
//#include "trace_log.h"
#include <vector>
#include <string>

//extern char *g_remoteServerIp_Char;
//extern std::string g_SOAP_ServerPort;
//extern std::string g_requestUri;
//extern std::string g_cjbh;
//extern std::string g_zdbs;
//extern std::string g_dwjgdm;
//extern int g_n_remote_ip_index;
//extern std::vector<std::string> g_vec_remote_server_ip;

TmriOutAccessSoapBindingProxy::TmriOutAccessSoapBindingProxy() : soap(SOAP_IO_DEFAULT)
{	TmriOutAccessSoapBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

TmriOutAccessSoapBindingProxy::TmriOutAccessSoapBindingProxy(const TmriOutAccessSoapBindingProxy& rhs)
{	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
}

TmriOutAccessSoapBindingProxy::TmriOutAccessSoapBindingProxy(const struct soap &_soap) : soap(_soap)
{ }

TmriOutAccessSoapBindingProxy::TmriOutAccessSoapBindingProxy(const char *endpoint) : soap(SOAP_IO_DEFAULT)
{	TmriOutAccessSoapBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = endpoint;
}

TmriOutAccessSoapBindingProxy::TmriOutAccessSoapBindingProxy(soap_mode iomode) : soap(iomode)
{	TmriOutAccessSoapBindingProxy_init(iomode, iomode);
}

TmriOutAccessSoapBindingProxy::TmriOutAccessSoapBindingProxy(const char *endpoint, soap_mode iomode) : soap(iomode)
{	TmriOutAccessSoapBindingProxy_init(iomode, iomode);
	soap_endpoint = endpoint;
}

TmriOutAccessSoapBindingProxy::TmriOutAccessSoapBindingProxy(soap_mode imode, soap_mode omode) : soap(imode, omode)
{	TmriOutAccessSoapBindingProxy_init(imode, omode);
}

TmriOutAccessSoapBindingProxy::~TmriOutAccessSoapBindingProxy()
{
	this->destroy();
	}

void TmriOutAccessSoapBindingProxy::TmriOutAccessSoapBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this, imode);
	soap_omode(this, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] = {
        {"SOAP-ENV", "http://schemas.xmlsoap.org/soap/envelope/", "http://www.w3.org/*/soap-envelope", NULL},
        {"SOAP-ENC", "http://schemas.xmlsoap.org/soap/encoding/", "http://www.w3.org/*/soap-encoding", NULL},
        {"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
        {"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
        {"ns1", "http://endpoint.axis.framework.tmri.com", NULL, NULL},
        {NULL, NULL, NULL, NULL}
    };
	soap_set_namespaces(this, namespaces);
}

#ifndef WITH_PURE_VIRTUAL
TmriOutAccessSoapBindingProxy *TmriOutAccessSoapBindingProxy::copy()
{	TmriOutAccessSoapBindingProxy *dup = SOAP_NEW_COPY(TmriOutAccessSoapBindingProxy(*(struct soap*)this));
	return dup;
}
#endif

TmriOutAccessSoapBindingProxy& TmriOutAccessSoapBindingProxy::operator=(const TmriOutAccessSoapBindingProxy& rhs)
{	soap_copy_context(this, &rhs);
	this->soap_endpoint = rhs.soap_endpoint;
	return *this;
}

void TmriOutAccessSoapBindingProxy::destroy()
{	soap_destroy(this);
	soap_end(this);
}

void TmriOutAccessSoapBindingProxy::reset()
{	this->destroy();
	soap_done(this);
	soap_initialize(this);
	TmriOutAccessSoapBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void TmriOutAccessSoapBindingProxy::soap_noheader()
{	this->header = NULL;
}

::SOAP_ENV__Header *TmriOutAccessSoapBindingProxy::soap_header()
{	return this->header;
}

::SOAP_ENV__Fault *TmriOutAccessSoapBindingProxy::soap_fault()
{	return this->fault;
}

const char *TmriOutAccessSoapBindingProxy::soap_fault_string()
{	return *soap_faultstring(this);
}

const char *TmriOutAccessSoapBindingProxy::soap_fault_detail()
{	return *soap_faultdetail(this);
}

int TmriOutAccessSoapBindingProxy::soap_close_socket()
{	return soap_closesock(this);
}

int TmriOutAccessSoapBindingProxy::soap_force_close_socket()
{	return soap_force_closesock(this);
}

void TmriOutAccessSoapBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void TmriOutAccessSoapBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this, os);
}
#endif

char *TmriOutAccessSoapBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this, buf, len);
}
#endif

int TmriOutAccessSoapBindingProxy::queryObjectOut(const char *endpoint, const char *soap_action, char *_xtlb, char *_jkxlh, char *_jkid, char *_UTF8XmlDoc, char *&_queryObjectOutReturn
                                                  , const char *_remoteServerIp_Char, const std::string &_SOAP_ServerPort, const std::string &_requestUri, const std::string &_cjbh
                                                  , const std::string &_zdbs, const std::string &_dwjgdm)
{	struct soap *soap = this;
	struct ns1__queryObjectOut soap_tmp_ns1__queryObjectOut;
	struct ns1__queryObjectOutResponse *soap_tmp_ns1__queryObjectOutResponse;

	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL) {
        static std::string tmp = "http://" + std::string(_remoteServerIp_Char) + ":" + _SOAP_ServerPort + _requestUri;
        soap_endpoint = tmp.c_str();
	}
    std::string _dwmc="";
    std::string _yhbz="";
    std::string _yhxm="";
	if (soap_action == NULL)
		soap_action = "";
	soap_tmp_ns1__queryObjectOut._xtlb = _xtlb;
	soap_tmp_ns1__queryObjectOut._jkxlh = _jkxlh;
	soap_tmp_ns1__queryObjectOut._jkid = _jkid;
    soap_tmp_ns1__queryObjectOut._dwmc= (char*)_dwmc.c_str();
    soap_tmp_ns1__queryObjectOut._yhbz= (char*)_yhbz.c_str();
    soap_tmp_ns1__queryObjectOut._yhxm= (char*)_yhxm.c_str();

    soap_tmp_ns1__queryObjectOut._QueryXmlDoc = _UTF8XmlDoc;
    if (!_dwjgdm.empty()) {
        soap_tmp_ns1__queryObjectOut._dwjgdm = (char *)_dwjgdm.data();
    }

    if (!_cjbh.empty()) {
        soap_tmp_ns1__queryObjectOut._cjsqbh = (char *)_cjbh.data();
    }

    if (!_zdbs.empty()) {
        soap_tmp_ns1__queryObjectOut._zdbs = (char *)_zdbs.data();
    }

	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_serializeheader(soap);
	soap_serialize_ns1__queryObjectOut(soap, &soap_tmp_ns1__queryObjectOut);
	if (soap_begin_count(soap))
		return soap->error;

	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
         || soap_put_ns1__queryObjectOut(soap, &soap_tmp_ns1__queryObjectOut, ns1_queryObjectOut.c_str(), "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}

	if (soap_end_count(soap))
		return soap->error;

	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
     || soap_put_ns1__queryObjectOut(soap, &soap_tmp_ns1__queryObjectOut, ns1_queryObjectOut.c_str(), "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);

	_queryObjectOutReturn = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);

	if (soap_recv_fault(soap, 1))
		return soap->error;

	soap_tmp_ns1__queryObjectOutResponse = soap_get_ns1__queryObjectOutResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns1__queryObjectOutResponse || soap->error)
		return soap_recv_fault(soap, 0);

	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);

	_queryObjectOutReturn = soap_tmp_ns1__queryObjectOutResponse->_queryObjectOutReturn;
	return soap_closesock(soap);
}

int TmriOutAccessSoapBindingProxy::writeObjectOut(const char *endpoint, const char *soap_action, char *_xtlb, char *_jkxlh, char *_jkid, char *_UTF8XmlDoc, char *&_writeObjectOutReturn
                                                  , const char *_remoteServerIp_Char, const std::string &_SOAP_ServerPort, const std::string &_requestUri, const std::string &_cjbh
                                                  , const std::string &_zdbs, const std::string &_dwjgdm)
{	struct soap *soap = this;
	struct ns1__writeObjectOut soap_tmp_ns1__writeObjectOut;
	struct ns1__writeObjectOutResponse *soap_tmp_ns1__writeObjectOutResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL) {
		//soap_endpoint = "http://192.168.16.112:9080/pnweb/services/TmriOutAccess";
        static std::string tmp = "http://" + std::string(_remoteServerIp_Char) + ":" + _SOAP_ServerPort + _requestUri;
		soap_endpoint = tmp.c_str();
	}
    std::string _dwmc="";
    std::string _yhbz="";
    std::string _yhxm="";
    std::string _jklb="2";
	if (soap_action == NULL)
		soap_action = "";
	soap_tmp_ns1__writeObjectOut._xtlb = _xtlb;
	soap_tmp_ns1__writeObjectOut._jkxlh = _jkxlh;
	soap_tmp_ns1__writeObjectOut._jkid = _jkid;
    soap_tmp_ns1__writeObjectOut._jklb = (char*)_jklb.c_str();
    soap_tmp_ns1__writeObjectOut._WriteXmlDoc = _UTF8XmlDoc;
    soap_tmp_ns1__writeObjectOut._dwmc= (char*)_dwmc.c_str();
    soap_tmp_ns1__writeObjectOut._yhbz= (char*)_yhbz.c_str();
    soap_tmp_ns1__writeObjectOut._yhxm= (char*)_yhxm.c_str();

    if (!_dwjgdm.empty()) {
        soap_tmp_ns1__writeObjectOut._dwjgdm = (char *)_dwjgdm.data();
    }

    if (!_cjbh.empty()) {
        soap_tmp_ns1__writeObjectOut._cjsqbh = (char *)_cjbh.data();
    }

    if (!_zdbs.empty()) {
        soap_tmp_ns1__writeObjectOut._zdbs = (char *)_zdbs.data();
    }

	soap_begin(soap);
	soap->encodingStyle = "http://schemas.xmlsoap.org/soap/encoding/";
	soap_serializeheader(soap);
	soap_serialize_ns1__writeObjectOut(soap, &soap_tmp_ns1__writeObjectOut);
	if (soap_begin_count(soap))
		return soap->error;


	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
         || soap_put_ns1__writeObjectOut(soap, &soap_tmp_ns1__writeObjectOut, ns1_writeObjectOut.c_str(), "")
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
     || soap_put_ns1__writeObjectOut(soap, &soap_tmp_ns1__writeObjectOut, ns1_writeObjectOut.c_str(), "")
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);



	_writeObjectOutReturn = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	if (soap_recv_fault(soap, 1))
		return soap->error;
	soap_tmp_ns1__writeObjectOutResponse = soap_get_ns1__writeObjectOutResponse(soap, NULL, "", NULL);
	if (!soap_tmp_ns1__writeObjectOutResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	_writeObjectOutReturn = soap_tmp_ns1__writeObjectOutResponse->_writeObjectOutReturn;
	return soap_closesock(soap);
}
/* End of client proxy code */
